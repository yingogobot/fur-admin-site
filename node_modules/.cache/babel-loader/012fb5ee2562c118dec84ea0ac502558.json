{"remainingRequest":"/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/node_modules/babel-loader/lib/index.js!/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/src/components/UploadExcel/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/src/components/UploadExcel/index.vue","mtime":1573891651591},{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.function.name\");\n\nvar _xlsx = _interopRequireDefault(require(\"xlsx\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  props: {\n    beforeUpload: Function,\n    // eslint-disable-line\n    onSuccess: Function // eslint-disable-line\n\n  },\n  data: function data() {\n    return {\n      loading: false,\n      excelData: {\n        header: null,\n        results: null\n      }\n    };\n  },\n  methods: {\n    generateData: function generateData(_ref) {\n      var header = _ref.header,\n          results = _ref.results;\n      this.excelData.header = header;\n      this.excelData.results = results;\n      this.onSuccess && this.onSuccess(this.excelData);\n    },\n    handleDrop: function handleDrop(e) {\n      e.stopPropagation();\n      e.preventDefault();\n      if (this.loading) return;\n      var files = e.dataTransfer.files;\n\n      if (files.length !== 1) {\n        this.$message.error('Only support uploading one file!');\n        return;\n      }\n\n      var rawFile = files[0]; // only use files[0]\n\n      if (!this.isExcel(rawFile)) {\n        this.$message.error('Only supports upload .xlsx, .xls, .csv suffix files');\n        return false;\n      }\n\n      this.upload(rawFile);\n      e.stopPropagation();\n      e.preventDefault();\n    },\n    handleDragover: function handleDragover(e) {\n      e.stopPropagation();\n      e.preventDefault();\n      e.dataTransfer.dropEffect = 'copy';\n    },\n    handleUpload: function handleUpload() {\n      this.$refs['excel-upload-input'].click();\n    },\n    handleClick: function handleClick(e) {\n      var files = e.target.files;\n      var rawFile = files[0]; // only use files[0]\n\n      if (!rawFile) return;\n      this.upload(rawFile);\n    },\n    upload: function upload(rawFile) {\n      this.$refs['excel-upload-input'].value = null; // fix can't select the same excel\n\n      if (!this.beforeUpload) {\n        this.readerData(rawFile);\n        return;\n      }\n\n      var before = this.beforeUpload(rawFile);\n\n      if (before) {\n        this.readerData(rawFile);\n      }\n    },\n    readerData: function readerData(rawFile) {\n      var _this = this;\n\n      this.loading = true;\n      return new Promise(function (resolve, reject) {\n        var reader = new FileReader();\n\n        reader.onload = function (e) {\n          var data = e.target.result;\n\n          var workbook = _xlsx.default.read(data, {\n            type: 'array'\n          });\n\n          var firstSheetName = workbook.SheetNames[0];\n          var worksheet = workbook.Sheets[firstSheetName];\n\n          var header = _this.getHeaderRow(worksheet);\n\n          var results = _xlsx.default.utils.sheet_to_json(worksheet);\n\n          _this.generateData({\n            header: header,\n            results: results\n          });\n\n          _this.loading = false;\n          resolve();\n        };\n\n        reader.readAsArrayBuffer(rawFile);\n      });\n    },\n    getHeaderRow: function getHeaderRow(sheet) {\n      var headers = [];\n\n      var range = _xlsx.default.utils.decode_range(sheet['!ref']);\n\n      var C;\n      var R = range.s.r;\n      /* start in the first row */\n\n      for (C = range.s.c; C <= range.e.c; ++C) {\n        /* walk every column in the range */\n        var cell = sheet[_xlsx.default.utils.encode_cell({\n          c: C,\n          r: R\n        })];\n        /* find the cell in the first row */\n\n\n        var hdr = 'UNKNOWN ' + C; // <-- replace with your desired default\n\n        if (cell && cell.t) hdr = _xlsx.default.utils.format_cell(cell);\n        headers.push(hdr);\n      }\n\n      return headers;\n    },\n    isExcel: function isExcel(file) {\n      return /\\.(xlsx|xls|csv)$/.test(file.name);\n    }\n  }\n};\nexports.default = _default;",{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <input ref=\"excel-upload-input\" class=\"excel-upload-input\" type=\"file\" accept=\".xlsx, .xls\" @change=\"handleClick\">\n    <div class=\"drop\" @drop=\"handleDrop\" @dragover=\"handleDragover\" @dragenter=\"handleDragover\">\n      Drop excel file here or\n      <el-button :loading=\"loading\" style=\"margin-left:16px;\" size=\"mini\" type=\"primary\" @click=\"handleUpload\">\n        Browse\n      </el-button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport XLSX from 'xlsx'\n\nexport default {\n  props: {\n    beforeUpload: Function, // eslint-disable-line\n    onSuccess: Function// eslint-disable-line\n  },\n  data() {\n    return {\n      loading: false,\n      excelData: {\n        header: null,\n        results: null\n      }\n    }\n  },\n  methods: {\n    generateData({ header, results }) {\n      this.excelData.header = header\n      this.excelData.results = results\n      this.onSuccess && this.onSuccess(this.excelData)\n    },\n    handleDrop(e) {\n      e.stopPropagation()\n      e.preventDefault()\n      if (this.loading) return\n      const files = e.dataTransfer.files\n      if (files.length !== 1) {\n        this.$message.error('Only support uploading one file!')\n        return\n      }\n      const rawFile = files[0] // only use files[0]\n\n      if (!this.isExcel(rawFile)) {\n        this.$message.error('Only supports upload .xlsx, .xls, .csv suffix files')\n        return false\n      }\n      this.upload(rawFile)\n      e.stopPropagation()\n      e.preventDefault()\n    },\n    handleDragover(e) {\n      e.stopPropagation()\n      e.preventDefault()\n      e.dataTransfer.dropEffect = 'copy'\n    },\n    handleUpload() {\n      this.$refs['excel-upload-input'].click()\n    },\n    handleClick(e) {\n      const files = e.target.files\n      const rawFile = files[0] // only use files[0]\n      if (!rawFile) return\n      this.upload(rawFile)\n    },\n    upload(rawFile) {\n      this.$refs['excel-upload-input'].value = null // fix can't select the same excel\n\n      if (!this.beforeUpload) {\n        this.readerData(rawFile)\n        return\n      }\n      const before = this.beforeUpload(rawFile)\n      if (before) {\n        this.readerData(rawFile)\n      }\n    },\n    readerData(rawFile) {\n      this.loading = true\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader()\n        reader.onload = e => {\n          const data = e.target.result\n          const workbook = XLSX.read(data, { type: 'array' })\n          const firstSheetName = workbook.SheetNames[0]\n          const worksheet = workbook.Sheets[firstSheetName]\n          const header = this.getHeaderRow(worksheet)\n          const results = XLSX.utils.sheet_to_json(worksheet)\n          this.generateData({ header, results })\n          this.loading = false\n          resolve()\n        }\n        reader.readAsArrayBuffer(rawFile)\n      })\n    },\n    getHeaderRow(sheet) {\n      const headers = []\n      const range = XLSX.utils.decode_range(sheet['!ref'])\n      let C\n      const R = range.s.r\n      /* start in the first row */\n      for (C = range.s.c; C <= range.e.c; ++C) { /* walk every column in the range */\n        const cell = sheet[XLSX.utils.encode_cell({ c: C, r: R })]\n        /* find the cell in the first row */\n        let hdr = 'UNKNOWN ' + C // <-- replace with your desired default\n        if (cell && cell.t) hdr = XLSX.utils.format_cell(cell)\n        headers.push(hdr)\n      }\n      return headers\n    },\n    isExcel(file) {\n      return /\\.(xlsx|xls|csv)$/.test(file.name)\n    }\n  }\n}\n</script>\n\n<style scoped>\n.excel-upload-input{\n  display: none;\n  z-index: -9999;\n}\n.drop{\n  border: 2px dashed #bbb;\n  width: 600px;\n  height: 160px;\n  line-height: 160px;\n  margin: 0 auto;\n  font-size: 24px;\n  border-radius: 5px;\n  text-align: center;\n  color: #bbb;\n  position: relative;\n}\n</style>\n"],"sourceRoot":"src/components/UploadExcel"}]}