{"remainingRequest":"/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/node_modules/babel-loader/lib/index.js!/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/src/directive/clipboard/clipboard.js","dependencies":[{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/src/directive/clipboard/clipboard.js","mtime":1573891651592},{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n// Inspired by https://github.com/Inndy/vue-clipboard2\nvar Clipboard = require('clipboard');\n\nif (!Clipboard) {\n  throw new Error('you should npm install `clipboard` --save at first ');\n}\n\nvar _default = {\n  bind: function bind(el, binding) {\n    if (binding.arg === 'success') {\n      el._v_clipboard_success = binding.value;\n    } else if (binding.arg === 'error') {\n      el._v_clipboard_error = binding.value;\n    } else {\n      var clipboard = new Clipboard(el, {\n        text: function text() {\n          return binding.value;\n        },\n        action: function action() {\n          return binding.arg === 'cut' ? 'cut' : 'copy';\n        }\n      });\n      clipboard.on('success', function (e) {\n        var callback = el._v_clipboard_success;\n        callback && callback(e); // eslint-disable-line\n      });\n      clipboard.on('error', function (e) {\n        var callback = el._v_clipboard_error;\n        callback && callback(e); // eslint-disable-line\n      });\n      el._v_clipboard = clipboard;\n    }\n  },\n  update: function update(el, binding) {\n    if (binding.arg === 'success') {\n      el._v_clipboard_success = binding.value;\n    } else if (binding.arg === 'error') {\n      el._v_clipboard_error = binding.value;\n    } else {\n      el._v_clipboard.text = function () {\n        return binding.value;\n      };\n\n      el._v_clipboard.action = function () {\n        return binding.arg === 'cut' ? 'cut' : 'copy';\n      };\n    }\n  },\n  unbind: function unbind(el, binding) {\n    if (binding.arg === 'success') {\n      delete el._v_clipboard_success;\n    } else if (binding.arg === 'error') {\n      delete el._v_clipboard_error;\n    } else {\n      el._v_clipboard.destroy();\n\n      delete el._v_clipboard;\n    }\n  }\n};\nexports.default = _default;",{"version":3,"sources":["/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/src/directive/clipboard/clipboard.js"],"names":["Clipboard","require","Error","bind","el","binding","arg","_v_clipboard_success","value","_v_clipboard_error","clipboard","text","action","on","e","callback","_v_clipboard","update","unbind","destroy"],"mappings":";;;;;;;AAAA;AACA,IAAMA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAI,CAACD,SAAL,EAAgB;AACd,QAAM,IAAIE,KAAJ,CAAU,qDAAV,CAAN;AACD;;eAEc;AACbC,EAAAA,IADa,gBACRC,EADQ,EACJC,OADI,EACK;AAChB,QAAIA,OAAO,CAACC,GAAR,KAAgB,SAApB,EAA+B;AAC7BF,MAAAA,EAAE,CAACG,oBAAH,GAA0BF,OAAO,CAACG,KAAlC;AACD,KAFD,MAEO,IAAIH,OAAO,CAACC,GAAR,KAAgB,OAApB,EAA6B;AAClCF,MAAAA,EAAE,CAACK,kBAAH,GAAwBJ,OAAO,CAACG,KAAhC;AACD,KAFM,MAEA;AACL,UAAME,SAAS,GAAG,IAAIV,SAAJ,CAAcI,EAAd,EAAkB;AAClCO,QAAAA,IADkC,kBAC3B;AAAE,iBAAON,OAAO,CAACG,KAAf;AAAsB,SADG;AAElCI,QAAAA,MAFkC,oBAEzB;AAAE,iBAAOP,OAAO,CAACC,GAAR,KAAgB,KAAhB,GAAwB,KAAxB,GAAgC,MAAvC;AAA+C;AAFxB,OAAlB,CAAlB;AAIAI,MAAAA,SAAS,CAACG,EAAV,CAAa,SAAb,EAAwB,UAAAC,CAAC,EAAI;AAC3B,YAAMC,QAAQ,GAAGX,EAAE,CAACG,oBAApB;AACAQ,QAAAA,QAAQ,IAAIA,QAAQ,CAACD,CAAD,CAApB,CAF2B,CAEH;AACzB,OAHD;AAIAJ,MAAAA,SAAS,CAACG,EAAV,CAAa,OAAb,EAAsB,UAAAC,CAAC,EAAI;AACzB,YAAMC,QAAQ,GAAGX,EAAE,CAACK,kBAApB;AACAM,QAAAA,QAAQ,IAAIA,QAAQ,CAACD,CAAD,CAApB,CAFyB,CAED;AACzB,OAHD;AAIAV,MAAAA,EAAE,CAACY,YAAH,GAAkBN,SAAlB;AACD;AACF,GArBY;AAsBbO,EAAAA,MAtBa,kBAsBNb,EAtBM,EAsBFC,OAtBE,EAsBO;AAClB,QAAIA,OAAO,CAACC,GAAR,KAAgB,SAApB,EAA+B;AAC7BF,MAAAA,EAAE,CAACG,oBAAH,GAA0BF,OAAO,CAACG,KAAlC;AACD,KAFD,MAEO,IAAIH,OAAO,CAACC,GAAR,KAAgB,OAApB,EAA6B;AAClCF,MAAAA,EAAE,CAACK,kBAAH,GAAwBJ,OAAO,CAACG,KAAhC;AACD,KAFM,MAEA;AACLJ,MAAAA,EAAE,CAACY,YAAH,CAAgBL,IAAhB,GAAuB,YAAW;AAAE,eAAON,OAAO,CAACG,KAAf;AAAsB,OAA1D;;AACAJ,MAAAA,EAAE,CAACY,YAAH,CAAgBJ,MAAhB,GAAyB,YAAW;AAAE,eAAOP,OAAO,CAACC,GAAR,KAAgB,KAAhB,GAAwB,KAAxB,GAAgC,MAAvC;AAA+C,OAArF;AACD;AACF,GA/BY;AAgCbY,EAAAA,MAhCa,kBAgCNd,EAhCM,EAgCFC,OAhCE,EAgCO;AAClB,QAAIA,OAAO,CAACC,GAAR,KAAgB,SAApB,EAA+B;AAC7B,aAAOF,EAAE,CAACG,oBAAV;AACD,KAFD,MAEO,IAAIF,OAAO,CAACC,GAAR,KAAgB,OAApB,EAA6B;AAClC,aAAOF,EAAE,CAACK,kBAAV;AACD,KAFM,MAEA;AACLL,MAAAA,EAAE,CAACY,YAAH,CAAgBG,OAAhB;;AACA,aAAOf,EAAE,CAACY,YAAV;AACD;AACF;AAzCY,C","sourcesContent":["// Inspired by https://github.com/Inndy/vue-clipboard2\nconst Clipboard = require('clipboard')\nif (!Clipboard) {\n  throw new Error('you should npm install `clipboard` --save at first ')\n}\n\nexport default {\n  bind(el, binding) {\n    if (binding.arg === 'success') {\n      el._v_clipboard_success = binding.value\n    } else if (binding.arg === 'error') {\n      el._v_clipboard_error = binding.value\n    } else {\n      const clipboard = new Clipboard(el, {\n        text() { return binding.value },\n        action() { return binding.arg === 'cut' ? 'cut' : 'copy' }\n      })\n      clipboard.on('success', e => {\n        const callback = el._v_clipboard_success\n        callback && callback(e) // eslint-disable-line\n      })\n      clipboard.on('error', e => {\n        const callback = el._v_clipboard_error\n        callback && callback(e) // eslint-disable-line\n      })\n      el._v_clipboard = clipboard\n    }\n  },\n  update(el, binding) {\n    if (binding.arg === 'success') {\n      el._v_clipboard_success = binding.value\n    } else if (binding.arg === 'error') {\n      el._v_clipboard_error = binding.value\n    } else {\n      el._v_clipboard.text = function() { return binding.value }\n      el._v_clipboard.action = function() { return binding.arg === 'cut' ? 'cut' : 'copy' }\n    }\n  },\n  unbind(el, binding) {\n    if (binding.arg === 'success') {\n      delete el._v_clipboard_success\n    } else if (binding.arg === 'error') {\n      delete el._v_clipboard_error\n    } else {\n      el._v_clipboard.destroy()\n      delete el._v_clipboard\n    }\n  }\n}\n"]}]}