{"remainingRequest":"/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/node_modules/babel-loader/lib/index.js!/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/node_modules/eslint-loader/index.js??ref--13-0!/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/src/permission.js","dependencies":[{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/src/permission.js","mtime":1573891651602},{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/node_modules/@babel/runtime-corejs2/helpers/objectSpread2\"));\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/node_modules/@babel/runtime-corejs2/helpers/asyncToGenerator\"));\n\nvar _router = _interopRequireDefault(require(\"./router\"));\n\nvar _store = _interopRequireDefault(require(\"./store\"));\n\nvar _elementUi = require(\"element-ui\");\n\nvar _nprogress = _interopRequireDefault(require(\"nprogress\"));\n\nrequire(\"nprogress/nprogress.css\");\n\nvar _auth = require(\"@/utils/auth\");\n\nvar _getPageTitle = _interopRequireDefault(require(\"@/utils/get-page-title\"));\n\n// progress bar\n// progress bar style\n_nprogress.default.configure({\n  showSpinner: false\n}); // NProgress Configuration\n\n\nvar whiteList = ['/login', '/auth-redirect']; // no redirect whitelist\n\n_router.default.beforeEach(\n/*#__PURE__*/\nfunction () {\n  var _ref = (0, _asyncToGenerator2.default)(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee(to, from, next) {\n    var hasToken, hasRoles, _ref2, roles, accessRoutes;\n\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // start progress bar\n            _nprogress.default.start(); // set page title\n\n\n            document.title = (0, _getPageTitle.default)(to.meta.title); // determine whether the user has logged in\n\n            hasToken = (0, _auth.getToken)();\n\n            if (!hasToken) {\n              _context.next = 35;\n              break;\n            }\n\n            if (!(to.path === '/login')) {\n              _context.next = 9;\n              break;\n            }\n\n            // if is logged in, redirect to the home page\n            next({\n              path: '/'\n            });\n\n            _nprogress.default.done();\n\n            _context.next = 33;\n            break;\n\n          case 9:\n            // determine whether the user has obtained his permission roles through getInfo\n            hasRoles = _store.default.getters.roles && _store.default.getters.roles.length > 0;\n\n            if (!hasRoles) {\n              _context.next = 14;\n              break;\n            }\n\n            next();\n            _context.next = 33;\n            break;\n\n          case 14:\n            _context.prev = 14;\n            _context.next = 17;\n            return _store.default.dispatch('user/getInfo');\n\n          case 17:\n            _ref2 = _context.sent;\n            roles = _ref2.roles;\n            _context.next = 21;\n            return _store.default.dispatch('permission/generateRoutes', roles);\n\n          case 21:\n            accessRoutes = _context.sent;\n\n            // dynamically add accessible routes\n            _router.default.addRoutes(accessRoutes); // hack method to ensure that addRoutes is complete\n            // set the replace: true, so the navigation will not leave a history record\n\n\n            next((0, _objectSpread2.default)({}, to, {\n              replace: true\n            }));\n            _context.next = 33;\n            break;\n\n          case 26:\n            _context.prev = 26;\n            _context.t0 = _context[\"catch\"](14);\n            _context.next = 30;\n            return _store.default.dispatch('user/resetToken');\n\n          case 30:\n            _elementUi.Message.error(_context.t0 || 'Has Error');\n\n            next(\"/login?redirect=\".concat(to.path));\n\n            _nprogress.default.done();\n\n          case 33:\n            _context.next = 36;\n            break;\n\n          case 35:\n            /* has no token*/\n            if (whiteList.indexOf(to.path) !== -1) {\n              // in the free login whitelist, go directly\n              next();\n            } else {\n              // other pages that do not have permission to access are redirected to the login page.\n              next(\"/login?redirect=\".concat(to.path));\n\n              _nprogress.default.done();\n            }\n\n          case 36:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[14, 26]]);\n  }));\n\n  return function (_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}());\n\n_router.default.afterEach(function () {\n  // finish progress bar\n  _nprogress.default.done();\n});",{"version":3,"sources":["/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/src/permission.js"],"names":["NProgress","configure","showSpinner","whiteList","router","beforeEach","to","from","next","start","document","title","meta","hasToken","path","done","hasRoles","store","getters","roles","length","dispatch","accessRoutes","addRoutes","replace","Message","error","indexOf","afterEach"],"mappings":";;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAHkC;AACD;AAIjCA,mBAAUC,SAAV,CAAoB;AAAEC,EAAAA,WAAW,EAAE;AAAf,CAApB,E,CAA4C;;;AAE5C,IAAMC,SAAS,GAAG,CAAC,QAAD,EAAW,gBAAX,CAAlB,C,CAA+C;;AAE/CC,gBAAOC,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAkB,iBAAMC,EAAN,EAAUC,IAAV,EAAgBC,IAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAChB;AACAR,+BAAUS,KAAV,GAFgB,CAIhB;;;AACAC,YAAAA,QAAQ,CAACC,KAAT,GAAiB,2BAAaL,EAAE,CAACM,IAAH,CAAQD,KAArB,CAAjB,CALgB,CAOhB;;AACME,YAAAA,QARU,GAQC,qBARD;;AAAA,iBAUZA,QAVY;AAAA;AAAA;AAAA;;AAAA,kBAWVP,EAAE,CAACQ,IAAH,KAAY,QAXF;AAAA;AAAA;AAAA;;AAYZ;AACAN,YAAAA,IAAI,CAAC;AAAEM,cAAAA,IAAI,EAAE;AAAR,aAAD,CAAJ;;AACAd,+BAAUe,IAAV;;AAdY;AAAA;;AAAA;AAgBZ;AACMC,YAAAA,QAjBM,GAiBKC,eAAMC,OAAN,CAAcC,KAAd,IAAuBF,eAAMC,OAAN,CAAcC,KAAd,CAAoBC,MAApB,GAA6B,CAjBzD;;AAAA,iBAkBRJ,QAlBQ;AAAA;AAAA;AAAA;;AAmBVR,YAAAA,IAAI;AAnBM;AAAA;;AAAA;AAAA;AAAA;AAAA,mBAwBgBS,eAAMI,QAAN,CAAe,cAAf,CAxBhB;;AAAA;AAAA;AAwBAF,YAAAA,KAxBA,SAwBAA,KAxBA;AAAA;AAAA,mBA2BmBF,eAAMI,QAAN,CAAe,2BAAf,EAA4CF,KAA5C,CA3BnB;;AAAA;AA2BFG,YAAAA,YA3BE;;AA6BR;AACAlB,4BAAOmB,SAAP,CAAiBD,YAAjB,EA9BQ,CAgCR;AACA;;;AACAd,YAAAA,IAAI,iCAAMF,EAAN;AAAUkB,cAAAA,OAAO,EAAE;AAAnB,eAAJ;AAlCQ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,mBAqCFP,eAAMI,QAAN,CAAe,iBAAf,CArCE;;AAAA;AAsCRI,+BAAQC,KAAR,CAAc,eAAS,WAAvB;;AACAlB,YAAAA,IAAI,2BAAoBF,EAAE,CAACQ,IAAvB,EAAJ;;AACAd,+BAAUe,IAAV;;AAxCQ;AAAA;AAAA;;AAAA;AA6Cd;AAEA,gBAAIZ,SAAS,CAACwB,OAAV,CAAkBrB,EAAE,CAACQ,IAArB,MAA+B,CAAC,CAApC,EAAuC;AACrC;AACAN,cAAAA,IAAI;AACL,aAHD,MAGO;AACL;AACAA,cAAAA,IAAI,2BAAoBF,EAAE,CAACQ,IAAvB,EAAJ;;AACAd,iCAAUe,IAAV;AACD;;AAtDa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAAA;AAAA;AAAA;AAAA;;AA0DAX,gBAAOwB,SAAP,CAAiB,YAAM;AACrB;AACA5B,qBAAUe,IAAV;AACD,CAHD","sourcesContent":["import router from './router'\nimport store from './store'\nimport { Message } from 'element-ui'\nimport NProgress from 'nprogress' // progress bar\nimport 'nprogress/nprogress.css' // progress bar style\nimport { getToken } from '@/utils/auth' // get token from cookie\nimport getPageTitle from '@/utils/get-page-title'\n\nNProgress.configure({ showSpinner: false }) // NProgress Configuration\n\nconst whiteList = ['/login', '/auth-redirect'] // no redirect whitelist\n\nrouter.beforeEach(async(to, from, next) => {\n  // start progress bar\n  NProgress.start()\n\n  // set page title\n  document.title = getPageTitle(to.meta.title)\n\n  // determine whether the user has logged in\n  const hasToken = getToken()\n\n  if (hasToken) {\n    if (to.path === '/login') {\n      // if is logged in, redirect to the home page\n      next({ path: '/' })\n      NProgress.done()\n    } else {\n      // determine whether the user has obtained his permission roles through getInfo\n      const hasRoles = store.getters.roles && store.getters.roles.length > 0\n      if (hasRoles) {\n        next()\n      } else {\n        try {\n          // get user info\n          // note: roles must be a object array! such as: ['admin'] or ,['developer','editor']\n          const { roles } = await store.dispatch('user/getInfo')\n\n          // generate accessible routes map based on roles\n          const accessRoutes = await store.dispatch('permission/generateRoutes', roles)\n\n          // dynamically add accessible routes\n          router.addRoutes(accessRoutes)\n\n          // hack method to ensure that addRoutes is complete\n          // set the replace: true, so the navigation will not leave a history record\n          next({ ...to, replace: true })\n        } catch (error) {\n          // remove token and go to login page to re-login\n          await store.dispatch('user/resetToken')\n          Message.error(error || 'Has Error')\n          next(`/login?redirect=${to.path}`)\n          NProgress.done()\n        }\n      }\n    }\n  } else {\n    /* has no token*/\n\n    if (whiteList.indexOf(to.path) !== -1) {\n      // in the free login whitelist, go directly\n      next()\n    } else {\n      // other pages that do not have permission to access are redirected to the login page.\n      next(`/login?redirect=${to.path}`)\n      NProgress.done()\n    }\n  }\n})\n\nrouter.afterEach(() => {\n  // finish progress bar\n  NProgress.done()\n})\n"]}]}