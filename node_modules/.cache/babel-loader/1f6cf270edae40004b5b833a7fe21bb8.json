{"remainingRequest":"/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/node_modules/babel-loader/lib/index.js!/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/src/components/ThemePicker/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/src/components/ThemePicker/index.vue","mtime":1573891651590},{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.number.constructor\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.regexp.constructor\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/node_modules/@babel/runtime-corejs2/helpers/asyncToGenerator\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar version = require('element-ui/package.json').version; // element-ui version from node_modules\n\n\nvar ORIGINAL_THEME = '#409EFF'; // default color\n\nvar _default = {\n  data: function data() {\n    return {\n      chalk: '',\n      // content of theme-chalk css\n      theme: ''\n    };\n  },\n  computed: {\n    defaultTheme: function defaultTheme() {\n      return this.$store.state.settings.theme;\n    }\n  },\n  watch: {\n    defaultTheme: {\n      handler: function handler(val, oldVal) {\n        this.theme = val;\n      },\n      immediate: true\n    },\n    theme: function () {\n      var _theme = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(val) {\n        var _this = this;\n\n        var oldVal, themeCluster, originalCluster, $message, getHandler, url, chalkHandler, styles;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                oldVal = this.chalk ? this.theme : ORIGINAL_THEME;\n\n                if (!(typeof val !== 'string')) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 3:\n                themeCluster = this.getThemeCluster(val.replace('#', ''));\n                originalCluster = this.getThemeCluster(oldVal.replace('#', ''));\n                console.log(themeCluster, originalCluster);\n                $message = this.$message({\n                  message: '  Compiling the theme',\n                  customClass: 'theme-message',\n                  type: 'success',\n                  duration: 0,\n                  iconClass: 'el-icon-loading'\n                });\n\n                getHandler = function getHandler(variable, id) {\n                  return function () {\n                    var originalCluster = _this.getThemeCluster(ORIGINAL_THEME.replace('#', ''));\n\n                    var newStyle = _this.updateStyle(_this[variable], originalCluster, themeCluster);\n\n                    var styleTag = document.getElementById(id);\n\n                    if (!styleTag) {\n                      styleTag = document.createElement('style');\n                      styleTag.setAttribute('id', id);\n                      document.head.appendChild(styleTag);\n                    }\n\n                    styleTag.innerText = newStyle;\n                  };\n                };\n\n                if (this.chalk) {\n                  _context.next = 12;\n                  break;\n                }\n\n                url = \"https://unpkg.com/element-ui@\".concat(version, \"/lib/theme-chalk/index.css\");\n                _context.next = 12;\n                return this.getCSSString(url, 'chalk');\n\n              case 12:\n                chalkHandler = getHandler('chalk', 'chalk-style');\n                chalkHandler();\n                styles = [].slice.call(document.querySelectorAll('style')).filter(function (style) {\n                  var text = style.innerText;\n                  return new RegExp(oldVal, 'i').test(text) && !/Chalk Variables/.test(text);\n                });\n                styles.forEach(function (style) {\n                  var innerText = style.innerText;\n                  if (typeof innerText !== 'string') return;\n                  style.innerText = _this.updateStyle(innerText, originalCluster, themeCluster);\n                });\n                this.$emit('change', val);\n                $message.close();\n\n              case 18:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function theme(_x) {\n        return _theme.apply(this, arguments);\n      }\n\n      return theme;\n    }()\n  },\n  methods: {\n    updateStyle: function updateStyle(style, oldCluster, newCluster) {\n      var newStyle = style;\n      oldCluster.forEach(function (color, index) {\n        newStyle = newStyle.replace(new RegExp(color, 'ig'), newCluster[index]);\n      });\n      return newStyle;\n    },\n    getCSSString: function getCSSString(url, variable) {\n      var _this2 = this;\n\n      return new Promise(function (resolve) {\n        var xhr = new XMLHttpRequest();\n\n        xhr.onreadystatechange = function () {\n          if (xhr.readyState === 4 && xhr.status === 200) {\n            _this2[variable] = xhr.responseText.replace(/@font-face{[^}]+}/, '');\n            resolve();\n          }\n        };\n\n        xhr.open('GET', url);\n        xhr.send();\n      });\n    },\n    getThemeCluster: function getThemeCluster(theme) {\n      var tintColor = function tintColor(color, tint) {\n        var red = parseInt(color.slice(0, 2), 16);\n        var green = parseInt(color.slice(2, 4), 16);\n        var blue = parseInt(color.slice(4, 6), 16);\n\n        if (tint === 0) {\n          // when primary color is in its rgb space\n          return [red, green, blue].join(',');\n        } else {\n          red += Math.round(tint * (255 - red));\n          green += Math.round(tint * (255 - green));\n          blue += Math.round(tint * (255 - blue));\n          red = red.toString(16);\n          green = green.toString(16);\n          blue = blue.toString(16);\n          return \"#\".concat(red).concat(green).concat(blue);\n        }\n      };\n\n      var shadeColor = function shadeColor(color, shade) {\n        var red = parseInt(color.slice(0, 2), 16);\n        var green = parseInt(color.slice(2, 4), 16);\n        var blue = parseInt(color.slice(4, 6), 16);\n        red = Math.round((1 - shade) * red);\n        green = Math.round((1 - shade) * green);\n        blue = Math.round((1 - shade) * blue);\n        red = red.toString(16);\n        green = green.toString(16);\n        blue = blue.toString(16);\n        return \"#\".concat(red).concat(green).concat(blue);\n      };\n\n      var clusters = [theme];\n\n      for (var i = 0; i <= 9; i++) {\n        clusters.push(tintColor(theme, Number((i / 10).toFixed(2))));\n      }\n\n      clusters.push(shadeColor(theme, 0.1));\n      return clusters;\n    }\n  }\n};\nexports.default = _default;",{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <el-color-picker\n    v-model=\"theme\"\n    :predefine=\"['#409EFF', '#1890ff', '#304156','#212121','#11a983', '#13c2c2', '#6959CD', '#f5222d', ]\"\n    class=\"theme-picker\"\n    popper-class=\"theme-picker-dropdown\"\n  />\n</template>\n\n<script>\nconst version = require('element-ui/package.json').version // element-ui version from node_modules\nconst ORIGINAL_THEME = '#409EFF' // default color\n\nexport default {\n  data() {\n    return {\n      chalk: '', // content of theme-chalk css\n      theme: ''\n    }\n  },\n  computed: {\n    defaultTheme() {\n      return this.$store.state.settings.theme\n    }\n  },\n  watch: {\n    defaultTheme: {\n      handler: function(val, oldVal) {\n        this.theme = val\n      },\n      immediate: true\n    },\n    async theme(val) {\n      const oldVal = this.chalk ? this.theme : ORIGINAL_THEME\n      if (typeof val !== 'string') return\n      const themeCluster = this.getThemeCluster(val.replace('#', ''))\n      const originalCluster = this.getThemeCluster(oldVal.replace('#', ''))\n      console.log(themeCluster, originalCluster)\n\n      const $message = this.$message({\n        message: '  Compiling the theme',\n        customClass: 'theme-message',\n        type: 'success',\n        duration: 0,\n        iconClass: 'el-icon-loading'\n      })\n\n      const getHandler = (variable, id) => {\n        return () => {\n          const originalCluster = this.getThemeCluster(ORIGINAL_THEME.replace('#', ''))\n          const newStyle = this.updateStyle(this[variable], originalCluster, themeCluster)\n\n          let styleTag = document.getElementById(id)\n          if (!styleTag) {\n            styleTag = document.createElement('style')\n            styleTag.setAttribute('id', id)\n            document.head.appendChild(styleTag)\n          }\n          styleTag.innerText = newStyle\n        }\n      }\n\n      if (!this.chalk) {\n        const url = `https://unpkg.com/element-ui@${version}/lib/theme-chalk/index.css`\n        await this.getCSSString(url, 'chalk')\n      }\n\n      const chalkHandler = getHandler('chalk', 'chalk-style')\n\n      chalkHandler()\n\n      const styles = [].slice.call(document.querySelectorAll('style'))\n        .filter(style => {\n          const text = style.innerText\n          return new RegExp(oldVal, 'i').test(text) && !/Chalk Variables/.test(text)\n        })\n      styles.forEach(style => {\n        const { innerText } = style\n        if (typeof innerText !== 'string') return\n        style.innerText = this.updateStyle(innerText, originalCluster, themeCluster)\n      })\n\n      this.$emit('change', val)\n\n      $message.close()\n    }\n  },\n\n  methods: {\n    updateStyle(style, oldCluster, newCluster) {\n      let newStyle = style\n      oldCluster.forEach((color, index) => {\n        newStyle = newStyle.replace(new RegExp(color, 'ig'), newCluster[index])\n      })\n      return newStyle\n    },\n\n    getCSSString(url, variable) {\n      return new Promise(resolve => {\n        const xhr = new XMLHttpRequest()\n        xhr.onreadystatechange = () => {\n          if (xhr.readyState === 4 && xhr.status === 200) {\n            this[variable] = xhr.responseText.replace(/@font-face{[^}]+}/, '')\n            resolve()\n          }\n        }\n        xhr.open('GET', url)\n        xhr.send()\n      })\n    },\n\n    getThemeCluster(theme) {\n      const tintColor = (color, tint) => {\n        let red = parseInt(color.slice(0, 2), 16)\n        let green = parseInt(color.slice(2, 4), 16)\n        let blue = parseInt(color.slice(4, 6), 16)\n\n        if (tint === 0) { // when primary color is in its rgb space\n          return [red, green, blue].join(',')\n        } else {\n          red += Math.round(tint * (255 - red))\n          green += Math.round(tint * (255 - green))\n          blue += Math.round(tint * (255 - blue))\n\n          red = red.toString(16)\n          green = green.toString(16)\n          blue = blue.toString(16)\n\n          return `#${red}${green}${blue}`\n        }\n      }\n\n      const shadeColor = (color, shade) => {\n        let red = parseInt(color.slice(0, 2), 16)\n        let green = parseInt(color.slice(2, 4), 16)\n        let blue = parseInt(color.slice(4, 6), 16)\n\n        red = Math.round((1 - shade) * red)\n        green = Math.round((1 - shade) * green)\n        blue = Math.round((1 - shade) * blue)\n\n        red = red.toString(16)\n        green = green.toString(16)\n        blue = blue.toString(16)\n\n        return `#${red}${green}${blue}`\n      }\n\n      const clusters = [theme]\n      for (let i = 0; i <= 9; i++) {\n        clusters.push(tintColor(theme, Number((i / 10).toFixed(2))))\n      }\n      clusters.push(shadeColor(theme, 0.1))\n      return clusters\n    }\n  }\n}\n</script>\n\n<style>\n.theme-message,\n.theme-picker-dropdown {\n  z-index: 99999 !important;\n}\n\n.theme-picker .el-color-picker__trigger {\n  height: 26px !important;\n  width: 26px !important;\n  padding: 2px;\n}\n\n.theme-picker-dropdown .el-color-dropdown__link-btn {\n  display: none;\n}\n</style>\n"],"sourceRoot":"src/components/ThemePicker"}]}