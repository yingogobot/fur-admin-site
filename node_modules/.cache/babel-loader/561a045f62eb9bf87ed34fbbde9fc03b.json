{"remainingRequest":"/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/node_modules/babel-loader/lib/index.js!/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/node_modules/eslint-loader/index.js??ref--13-0!/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/src/store/modules/permission.js","dependencies":[{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/src/store/modules/permission.js","mtime":1573891651603},{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.filterAsyncRoutes = filterAsyncRoutes;\nexports.default = void 0;\n\nvar _objectSpread2 = _interopRequireDefault(require(\"/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/node_modules/@babel/runtime-corejs2/helpers/objectSpread2\"));\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es7.array.includes\");\n\nrequire(\"core-js/modules/es6.string.includes\");\n\nvar _router = require(\"@/router\");\n\nfunction hasPermission(roles, route) {\n  if (route.meta && route.meta.roles) {\n    return roles.some(function (role) {\n      return route.meta.roles.includes(role);\n    });\n  } else {\n    return true;\n  }\n}\n/**\n * Filter asynchronous routing tables by recursion\n * @param routes asyncRoutes\n * @param roles\n */\n\n\nfunction filterAsyncRoutes(routes, roles) {\n  var res = [];\n  routes.forEach(function (route) {\n    var tmp = (0, _objectSpread2.default)({}, route);\n\n    if (hasPermission(roles, tmp)) {\n      if (tmp.children) {\n        tmp.children = filterAsyncRoutes(tmp.children, roles);\n      }\n\n      res.push(tmp);\n    }\n  });\n  return res;\n}\n\nvar state = {\n  routes: [],\n  addRoutes: []\n};\nvar mutations = {\n  SET_ROUTES: function SET_ROUTES(state, routes) {\n    state.addRoutes = routes;\n    state.routes = _router.constantRoutes.concat(routes);\n  }\n};\nvar actions = {\n  generateRoutes: function generateRoutes(_ref, roles) {\n    var commit = _ref.commit;\n    return new Promise(function (resolve) {\n      var accessedRoutes;\n\n      if (roles.includes('admin')) {\n        accessedRoutes = _router.asyncRoutes || [];\n      } else {\n        accessedRoutes = filterAsyncRoutes(_router.asyncRoutes, roles);\n      }\n\n      commit('SET_ROUTES', accessedRoutes);\n      resolve(accessedRoutes);\n    });\n  }\n};\nvar _default = {\n  namespaced: true,\n  state: state,\n  mutations: mutations,\n  actions: actions\n};\nexports.default = _default;",{"version":3,"sources":["/Users/yinxu/Desktop/Dev/Fur-Admin/vue-element-admin/src/store/modules/permission.js"],"names":["hasPermission","roles","route","meta","some","role","includes","filterAsyncRoutes","routes","res","forEach","tmp","children","push","state","addRoutes","mutations","SET_ROUTES","constantRoutes","concat","actions","generateRoutes","commit","Promise","resolve","accessedRoutes","asyncRoutes","namespaced"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;AAOA,SAASA,aAAT,CAAuBC,KAAvB,EAA8BC,KAA9B,EAAqC;AACnC,MAAIA,KAAK,CAACC,IAAN,IAAcD,KAAK,CAACC,IAAN,CAAWF,KAA7B,EAAoC;AAClC,WAAOA,KAAK,CAACG,IAAN,CAAW,UAAAC,IAAI;AAAA,aAAIH,KAAK,CAACC,IAAN,CAAWF,KAAX,CAAiBK,QAAjB,CAA0BD,IAA1B,CAAJ;AAAA,KAAf,CAAP;AACD,GAFD,MAEO;AACL,WAAO,IAAP;AACD;AACF;AAED;;;;;;;AAKO,SAASE,iBAAT,CAA2BC,MAA3B,EAAmCP,KAAnC,EAA0C;AAC/C,MAAMQ,GAAG,GAAG,EAAZ;AAEAD,EAAAA,MAAM,CAACE,OAAP,CAAe,UAAAR,KAAK,EAAI;AACtB,QAAMS,GAAG,mCAAQT,KAAR,CAAT;;AACA,QAAIF,aAAa,CAACC,KAAD,EAAQU,GAAR,CAAjB,EAA+B;AAC7B,UAAIA,GAAG,CAACC,QAAR,EAAkB;AAChBD,QAAAA,GAAG,CAACC,QAAJ,GAAeL,iBAAiB,CAACI,GAAG,CAACC,QAAL,EAAeX,KAAf,CAAhC;AACD;;AACDQ,MAAAA,GAAG,CAACI,IAAJ,CAASF,GAAT;AACD;AACF,GARD;AAUA,SAAOF,GAAP;AACD;;AAED,IAAMK,KAAK,GAAG;AACZN,EAAAA,MAAM,EAAE,EADI;AAEZO,EAAAA,SAAS,EAAE;AAFC,CAAd;AAKA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,UAAU,EAAE,oBAACH,KAAD,EAAQN,MAAR,EAAmB;AAC7BM,IAAAA,KAAK,CAACC,SAAN,GAAkBP,MAAlB;AACAM,IAAAA,KAAK,CAACN,MAAN,GAAeU,uBAAeC,MAAf,CAAsBX,MAAtB,CAAf;AACD;AAJe,CAAlB;AAOA,IAAMY,OAAO,GAAG;AACdC,EAAAA,cADc,gCACapB,KADb,EACoB;AAAA,QAAjBqB,MAAiB,QAAjBA,MAAiB;AAChC,WAAO,IAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAC5B,UAAIC,cAAJ;;AACA,UAAIxB,KAAK,CAACK,QAAN,CAAe,OAAf,CAAJ,EAA6B;AAC3BmB,QAAAA,cAAc,GAAGC,uBAAe,EAAhC;AACD,OAFD,MAEO;AACLD,QAAAA,cAAc,GAAGlB,iBAAiB,CAACmB,mBAAD,EAAczB,KAAd,CAAlC;AACD;;AACDqB,MAAAA,MAAM,CAAC,YAAD,EAAeG,cAAf,CAAN;AACAD,MAAAA,OAAO,CAACC,cAAD,CAAP;AACD,KATM,CAAP;AAUD;AAZa,CAAhB;eAee;AACbE,EAAAA,UAAU,EAAE,IADC;AAEbb,EAAAA,KAAK,EAALA,KAFa;AAGbE,EAAAA,SAAS,EAATA,SAHa;AAIbI,EAAAA,OAAO,EAAPA;AAJa,C","sourcesContent":["import { asyncRoutes, constantRoutes } from '@/router'\n\n/**\n * Use meta.role to determine if the current user has permission\n * @param roles\n * @param route\n */\nfunction hasPermission(roles, route) {\n  if (route.meta && route.meta.roles) {\n    return roles.some(role => route.meta.roles.includes(role))\n  } else {\n    return true\n  }\n}\n\n/**\n * Filter asynchronous routing tables by recursion\n * @param routes asyncRoutes\n * @param roles\n */\nexport function filterAsyncRoutes(routes, roles) {\n  const res = []\n\n  routes.forEach(route => {\n    const tmp = { ...route }\n    if (hasPermission(roles, tmp)) {\n      if (tmp.children) {\n        tmp.children = filterAsyncRoutes(tmp.children, roles)\n      }\n      res.push(tmp)\n    }\n  })\n\n  return res\n}\n\nconst state = {\n  routes: [],\n  addRoutes: []\n}\n\nconst mutations = {\n  SET_ROUTES: (state, routes) => {\n    state.addRoutes = routes\n    state.routes = constantRoutes.concat(routes)\n  }\n}\n\nconst actions = {\n  generateRoutes({ commit }, roles) {\n    return new Promise(resolve => {\n      let accessedRoutes\n      if (roles.includes('admin')) {\n        accessedRoutes = asyncRoutes || []\n      } else {\n        accessedRoutes = filterAsyncRoutes(asyncRoutes, roles)\n      }\n      commit('SET_ROUTES', accessedRoutes)\n      resolve(accessedRoutes)\n    })\n  }\n}\n\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions\n}\n"]}]}