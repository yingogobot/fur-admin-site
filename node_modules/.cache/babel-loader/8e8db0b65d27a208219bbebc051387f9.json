{"remainingRequest":"/Users/yinxu/Desktop/Dev/Fur-Admin/fur-admin-site/node_modules/babel-loader/lib/index.js!/Users/yinxu/Desktop/Dev/Fur-Admin/fur-admin-site/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yinxu/Desktop/Dev/Fur-Admin/fur-admin-site/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yinxu/Desktop/Dev/Fur-Admin/fur-admin-site/src/views/inventory/inventory-out.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/fur-admin-site/src/views/inventory/inventory-out.vue","mtime":1576582715907},{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/fur-admin-site/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/fur-admin-site/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/fur-admin-site/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/fur-admin-site/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/yinxu/Desktop/Dev/Fur-Admin/fur-admin-site/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"/Users/yinxu/Desktop/Dev/Fur-Admin/fur-admin-site/node_modules/@babel/runtime-corejs2/helpers/objectSpread2\"));\n\nvar _inventory = require(\"@/api/inventory\");\n\nvar _product = require(\"@/api/product\");\n\nvar _waves = _interopRequireDefault(require(\"@/directive/waves\"));\n\nvar _utils = require(\"@/utils\");\n\nvar _Pagination = _interopRequireDefault(require(\"@/components/Pagination\"));\n\nvar _vuex = require(\"vuex\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// waves directive\n// secondary package based on el-pagination\nvar _default = {\n  name: 'ComplexTable',\n  components: {\n    Pagination: _Pagination.default\n  },\n  directives: {\n    waves: _waves.default\n  },\n  filters: {},\n  data: function data() {\n    return {\n      tableKey: 0,\n      inventories: null,\n      total: 0,\n      listLoading: true,\n      inventoryTypes: [],\n      productTypes: [],\n      productSubTypes: [],\n      selectedProducts: [],\n      products: [],\n      productsStorage: [],\n      listQuery: {\n        inventory_id: undefined,\n        inventory_type: undefined,\n        page: 1,\n        limit: 10,\n        product_type: undefined,\n        product_sub_type: undefined,\n        product: undefined\n      },\n      temp: {\n        inventory_type: undefined,\n        products: [{\n          product_type: '',\n          product_sub_type: '',\n          product_id: '',\n          quantity: undefined,\n          cost: undefined,\n          size: '',\n          key: 1\n        }],\n        note: undefined\n      },\n      dialogFormVisible: false,\n      rowSpans: null\n    };\n  },\n  created: function created() {\n    this.getInventoryOut();\n    this.getInventoryOutCount();\n    this.getProductTypes();\n    this.getInventoryOutTypes();\n    this.loadProductStorage();\n  },\n  computed: (0, _objectSpread2.default)({}, (0, _vuex.mapGetters)(['id'])),\n  methods: {\n    calculateRowSpan: function calculateRowSpan() {\n      var g = [];\n      var count = 0;\n      this.inventories.forEach(function (i) {\n        var found = false;\n        g.forEach(function (t) {\n          if (t.id === i.inventory_id) {\n            found = true;\n            t.end++;\n            t.rowSpan++;\n            count = t.start + t.rowSpan;\n          }\n        });\n\n        if (!found) {\n          var newT = {\n            id: i.inventory_id,\n            start: count,\n            end: count + 1,\n            rowSpan: 1\n          };\n          count++;\n          g.push(newT);\n        }\n      });\n      console.log(g);\n      this.rowSpans = g;\n    },\n    getInventoryOut: function getInventoryOut() {\n      var _this = this;\n\n      this.listLoading = true;\n      (0, _inventory.fetchAllInventorys)({\n        inventory_type: 2,\n        filter_data: this.listQuery\n      }).then(function (response) {\n        _this.inventories = response.data;\n        _this.listLoading = false;\n\n        _this.calculateRowSpan();\n      }).catch(function (err) {\n        _this.$message({\n          message: '读取库存失败，请联系徐神检查',\n          type: 'error'\n        });\n\n        _this.listLoading = false;\n      });\n    },\n    getInventoryOutTypes: function getInventoryOutTypes() {\n      var _this2 = this;\n\n      (0, _inventory.getAllInventoryTpes)(2).then(function (response) {\n        _this2.inventoryTypes = response;\n      });\n    },\n    getInventoryOutCount: function getInventoryOutCount() {\n      var _this3 = this;\n\n      (0, _inventory.getAllInventoryCount)(2).then(function (response) {\n        _this3.total = response.total;\n      });\n    },\n    getProductTypes: function getProductTypes() {\n      var _this4 = this;\n\n      (0, _product.getAllProductType)().then(function (response) {\n        _this4.productTypes = response;\n      });\n    },\n    getSubType: function getSubType(productType, item) {\n      var _this5 = this;\n\n      this.listQuery.product = undefined;\n      this.listQuery.product_sub_type = undefined;\n      this.productSubTypes = [];\n      this.selectedProducts = [];\n\n      if (productType) {\n        (0, _product.getProductSubType)({\n          product_type_id: productType\n        }).then(function (response) {\n          _this5.productSubTypes = response;\n        });\n      }\n\n      if (item) {\n        item.product_sub_type = undefined;\n        item.product_id = undefined;\n        item.cost = undefined;\n        item.size = undefined;\n        item.quantity = undefined;\n      }\n    },\n    getSelectedProducts: function getSelectedProducts(subType) {\n      var _this6 = this;\n\n      this.listQuery.product = undefined;\n      this.selectedProducts = [];\n\n      if (subType) {\n        (0, _product.getProductBySubType)({\n          product_sub_type: subType\n        }).then(function (response) {\n          _this6.selectedProducts = response;\n        });\n      }\n    },\n    getProductBySubType: function getProductBySubType(subType, item) {\n      var _this7 = this;\n\n      if (subType) {\n        (0, _product.getProductBySubType)({\n          product_sub_type: subType\n        }).then(function (response) {\n          _this7.products = response;\n        });\n      }\n\n      if (item) {\n        item.product_id = undefined;\n        item.cost = undefined;\n        item.size = undefined;\n        item.quantity = undefined;\n      }\n    },\n    loadProductStorage: function loadProductStorage() {\n      var _this8 = this;\n\n      (0, _inventory.getStorage)().then(function (response) {\n        _this8.productsStorage = response;\n      });\n    },\n    readProductInfo: function readProductInfo(item) {\n      this.products.forEach(function (p) {\n        if (p.id === item.product_id) {\n          item.size = p.size;\n          item.cost = p.cost;\n        }\n      });\n      this.productsStorage.forEach(function (p) {\n        if (p.product_id === item.product_id) {\n          item.storage = p.quantity;\n        }\n      });\n    },\n    objectSpanMethod: function objectSpanMethod(_ref) {\n      var row = _ref.row,\n          column = _ref.column,\n          rowIndex = _ref.rowIndex,\n          columnIndex = _ref.columnIndex;\n\n      if (columnIndex === 0 || columnIndex === 1 || columnIndex === 2 || columnIndex === 9) {\n        var data = {\n          rowspan: 0,\n          colspan: 0\n        };\n        this.rowSpans.forEach(function (i) {\n          if (rowIndex >= i.start && rowIndex < i.end && (rowIndex - i.start) % i.rowSpan === 0) {\n            data = {\n              rowspan: i.rowSpan,\n              colspan: 1\n            };\n            return;\n          }\n        });\n        return data;\n      }\n    },\n    handleFilter: function handleFilter() {\n      this.listQuery.page = 1;\n      this.getInventoryOut();\n    },\n    addMoreProduct: function addMoreProduct() {\n      this.temp.products.push({\n        product_type: '',\n        product_sub_type: '',\n        product_id: '',\n        quantity: undefined,\n        cost: undefined,\n        key: this.temp.products.length + 1\n      });\n    },\n    removeProduct: function removeProduct(itemIndex) {\n      this.$delete(this.temp.products, itemIndex);\n    },\n    handleCreate: function handleCreate() {\n      this.dialogFormVisible = true;\n    },\n    addNewInventory: function addNewInventory() {\n      var _this9 = this;\n\n      this.$confirm('确定添加?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function () {\n        _this9.sendAddInventoryRequest();\n      }).catch(function (err) {\n        console.log(err);\n      });\n    },\n    sendAddInventoryRequest: function sendAddInventoryRequest() {\n      var _this10 = this;\n\n      if (!this.temp.inventory_type) {\n        this.$message({\n          message: '出库类型必须填写',\n          type: 'error'\n        });\n      } else if (this.temp.products.length === 0) {\n        this.$message({\n          message: '至少要有一个或以上的产品入库',\n          type: 'error'\n        });\n      } else {\n        var data = {\n          inventory_type: this.temp.inventory_type,\n          account_id: this.id,\n          product_data: [],\n          note: this.temp.note\n        };\n        this.temp.products.forEach(function (p) {\n          var d = {\n            id: p.product_id,\n            quantity: p.quantity,\n            cost: p.cost\n          };\n          data.product_data.push(d);\n        });\n        console.log(data);\n        this.listLoading = true;\n        (0, _inventory.addNewInventoryRequest)(data).then(function (response) {\n          _this10.listLoading = false;\n\n          _this10.$alert('库存添加成功', '成功', {\n            confirmButtonText: '确定',\n            callback: function callback(action) {\n              _this10.page = 1;\n\n              _this10.getInventoryOut();\n\n              _this10.loadProductStorage();\n\n              _this10.dialogFormVisible = false;\n              _this10.temp = {\n                inventory_type: undefined,\n                products: [{\n                  product_type: '',\n                  product_sub_type: '',\n                  product_id: '',\n                  quantity: undefined,\n                  cost: undefined,\n                  size: '',\n                  key: 1\n                }],\n                note: undefined\n              };\n            }\n          });\n        }).catch(function (err) {\n          console.log(err);\n\n          _this10.$message({\n            message: '添加库存失败，请联系徐神检查',\n            type: 'error'\n          });\n\n          _this10.listLoading = false;\n        });\n      }\n    }\n  }\n};\nexports.default = _default;",{"version":3,"sources":["inventory-out.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <div class=\"filter-container\">\n      <h2>筛选结果</h2>\n      <el-input v-model=\"listQuery.inventory_id\" placeholder=\"入库批次\" style=\"width: 150px;\" class=\"filter-item\"/>\n      <el-select v-model=\"listQuery.inventory_type\" placeholder=\"入库类型\" clearable style=\"width: 150px; margin-left: 15px;\" class=\"filter-item\">\n        <el-option v-for=\"item in inventoryTypes\" :key=\"item.id\" :label=\"item.title\" :value=\"item.id\" />\n      </el-select>\n      <el-select v-model=\"listQuery.product_type\" placeholder=\"产品类型\" clearable style=\"width: 150px; margin-left: 15px;\" class=\"filter-item\" @change=\"getSubType(listQuery.product_type)\">\n        <el-option v-for=\"item in productTypes\" :key=\"item.id\" :label=\"item.title\" :value=\"item.id\" />\n      </el-select>\n      <el-select v-model=\"listQuery.product_sub_type\" placeholder=\"产品分类\" clearable style=\"width: 150px; margin-left: 15px;\" class=\"filter-item\" @change=\"getSelectedProducts(listQuery.product_sub_type)\">\n        <el-option v-for=\"item in productSubTypes\" :key=\"item.id\" :label=\"item.title\" :value=\"item.id\" />\n      </el-select>\n      <el-select v-model=\"listQuery.product\" placeholder=\"产品\" clearable style=\"width: 150px; margin-left: 15px;\" class=\"filter-item\">\n        <el-option v-for=\"item in selectedProducts\" :key=\"item.id\" :label=\"item.title\" :value=\"item.id\" />\n      </el-select>\n      <el-button v-waves class=\"filter-item\" type=\"primary\" icon=\"el-icon-search\" @click=\"handleFilter\" style=\"width: 100px; margin-left: 15px;\">\n        搜索\n      </el-button>\n      <el-button class=\"filter-item\" style=\"width: 200px; margin-left: 10px;\" type=\"success\" icon=\"el-icon-edit\" @click=\"handleCreate\">\n        添加新入库\n      </el-button>\n    </div>\n\n    <h2>出库详情</h2>\n    <el-table\n      :key=\"tableKey\"\n      v-loading=\"listLoading\"\n      :data=\"inventories\"\n      :span-method=\"objectSpanMethod\"\n      border\n      fit\n      highlight-current-row\n      style=\"width: 100%;\"\n    >\n      <el-table-column label=\"出库批次ID\" prop=\"id\" width=\"100px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.inventory_id }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"出库类型\" prop=\"inventory_type\" width=\"100px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.inventory_type }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"出库时间\" prop=\"inventory_type\" width=\"150px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <span>{{moment(row.created_at).format('YYYY-MM-DD')}}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"产品类型\" width=\"150px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <el-tag class=\"tag\" :color=\"row.tag_color\">{{ row.product_type }}</el-tag>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"产品细类\" width=\"150px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <el-tag class=\"sub_type_tag\" :color=\"row.sub_type_tag_color\">{{ row.product_sub_type }}</el-tag>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"产品名称\" min-width=\"200px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <span class=\"link-type\" @click=\"handleUpdate(row)\">{{ row.title }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"产品型号\" width=\"100px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.size }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"出库数量\" width=\"100px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.quantity }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"产品成本\" width=\"150px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <span>￥{{ row.per_item_cost_atm }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"录入人\" width=\"150px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.added_by_name }}</span>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <pagination v-show=\"total>0\" :total=\"total\" :page.sync=\"listQuery.page\" :limit.sync=\"listQuery.limit\" @pagination=\"getInventoryOut\" />\n\n    <el-dialog title=\"添加新出库\" :visible.sync=\"dialogFormVisible\" width=\"80%\">\n      <el-form ref=\"dataForm\"\n        :model=\"temp\" \n        label-position=\"left\" \n        label-width=\"10px\" \n        style=\"margin-left:20px;\">\n        <div>\n          <h3 style=\"display: inline-block; width: 100px;\"> 出库类型 </h3>\n          <el-form-item prop=\"type\" style=\"display: inline-block;\">\n            <el-select v-model=\"temp.inventory_type\" placeholder=\"选择出库类型\">\n              <el-option v-for=\"item in inventoryTypes\" :key=\"item.id\" :label=\"item.title\" :value=\"item.id\" />\n            </el-select>\n          </el-form-item>\n        </div>\n        <div>\n          <h3 style=\"display: inline-block; width: 100px; vertical-align: top; margin-top: 0;\"> 入库产品 </h3>\n          <div style=\"display: inline-block;\">\n            <div style=\" margin-bottom: 5px;\">\n              <div class=\"input-title\">产品类型</div>\n              <div class=\"input-title\">产品分类</div>\n              <div class=\"input-title\">产品名称</div>\n              <div class=\"input-title\">产品规格</div>\n              <div class=\"input-title\">入库数量</div>\n              <div class=\"input-title\">产品成本</div>\n              <div class=\"input-title\">当前库存</div>\n            </div>\n            <el-form-item v-for=\"(item, index) in temp.products\" label=\"\" :key=\"item.id\" prop=\"product\" style=\"margin-bottom: 10px;\">\n              <el-select v-model=\"item.product_type\" placeholder=\"选择产品类型\" \n                clearable style=\"width: 150px;\" class=\"filter-item\" \n                @change=\"getSubType(item.product_type, item)\"\n                @clear=\"getSubType(item.product_type, item)\">\n                <el-option v-for=\"item in productTypes\" :key=\"item.id\" :label=\"item.title\" :value=\"item.id\" />\n              </el-select>\n              <el-select v-model=\"item.product_sub_type\" class=\"filter-item\" placeholder=\"选择产品分类\" \n                clearable style=\"width: 150px; margin-left: 10px;\" \n                @change=\"getProductBySubType(item.product_sub_type, item)\" \n                @clear=\"getProductBySubType(item.product_sub_type, item)\">\n                <el-option v-for=\"item in productSubTypes\" :key=\"item.id\" :label=\"item.title\" :value=\"item.id\" />\n              </el-select>\n              <el-select v-model=\"item.product_id\" class=\"filter-item\" placeholder=\"选择产品名称\" \n                clearable style=\"width: 150px; margin-left: 10px;\" \n                @change=\"readProductInfo(item)\"\n                @clear=\"readProductInfo(item)\">\n                <el-option v-for=\"item in products\" :key=\"item.id\" :label=\"item.title\" :value=\"item.id\" />\n              </el-select>\n              <el-input placeholder=\"产品型号\" v-model=\"item.size\" :disabled=\"true\" style=\"width: 150px; margin-left: 10px;\" class=\"filter-item\" />\n              <el-input v-model=\"item.quantity\" placeholder=\"填写入库数量\" class=\"filter-item\" clearable style=\"width: 150px; margin-left: 10px;\" />\n              <el-input v-model=\"item.cost\" placeholder=\"填写产品成本\" class=\"filter-item\" clearable style=\"width: 150px; margin-left: 10px;\" />\n              <el-input v-model=\"item.storage\" class=\"filter-item\" :disabled=\"true\" style=\"width: 150px; margin-left: 10px;\" />\n              <el-button style=\"margin-left: 40px;\" type=\"danger\" icon=\"el-icon-delete\" @click=\"removeProduct(index)\" />\n            </el-form-item>\n\n            <el-form-item>\n              <el-button style=\"width: 150px;\" type=\"primary\" plain @click=\"addMoreProduct\">添加产品</el-button>\n            </el-form-item>\n          </div>\n          <div>\n          <h3 style=\"display: inline-block; width: 100px; vertical-align: top; margin-top: 0;\"> 入库备注 </h3>\n          <el-input\n            type=\"textarea\"\n            :autosize=\"{ minRows: 2, maxRows: 4}\"\n            placeholder=\"备注\"\n            v-model=\"temp.note\"\n            style=\"width: 70%\" />\n            </div>\n        </div>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"dialogFormVisible = false\">\n          取消\n        </el-button>\n        <el-button type=\"primary\" @click=\"addNewInventory()\">\n          提交\n        </el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { \n  fetchAllInventorys, \n  getAllInventoryCount, \n  getAllInventoryTpes, \n  addNewInventoryRequest, \n  getStorage \n  } \n  from '@/api/inventory'\nimport { getAllProductType, getProductSubType, getProductBySubType } from '@/api/product'\n\nimport waves from '@/directive/waves' // waves directive\nimport { parseTime } from '@/utils'\nimport Pagination from '@/components/Pagination' // secondary package based on el-pagination\nimport { mapGetters } from 'vuex'\n\nexport default {\n  name: 'ComplexTable',\n  components: { Pagination },\n  directives: { waves },\n  filters: {},\n  data() {\n    return {\n      tableKey: 0,\n      inventories: null,\n      total: 0,\n      listLoading: true,\n      inventoryTypes:[],\n      productTypes: [],\n      productSubTypes: [],\n      selectedProducts: [],\n      products: [],\n      productsStorage: [],\n      listQuery: {\n        inventory_id: undefined,\n        inventory_type: undefined,\n        page: 1,\n        limit: 10,\n        product_type: undefined,\n        product_sub_type: undefined,\n        product: undefined,\n      },\n      temp: {\n        inventory_type: undefined,\n        products: [{\n            product_type: '',\n            product_sub_type: '',\n            product_id: '',\n            quantity: undefined,\n            cost: undefined,\n            size: '',\n            key: 1\n          }\n        ],\n        note: undefined\n      },\n      dialogFormVisible: false,\n      rowSpans: null\n    }\n  },\n  created() {\n    this.getInventoryOut()\n    this.getInventoryOutCount()\n    this.getProductTypes()\n    this.getInventoryOutTypes()\n    this.loadProductStorage()\n  },\n  computed: {\n    ...mapGetters([\n      'id'\n    ])\n  },\n  methods: {\n    calculateRowSpan() {\n      let g = []\n      let count = 0\n      this.inventories.forEach(i => {\n        let found = false\n        g.forEach(t => {\n          if (t.id === i.inventory_id) {\n            found = true\n            t.end++\n            t.rowSpan++\n            count = t.start + t.rowSpan\n          }\n        })\n\n        if (!found) {\n          let newT = {\n            id: i.inventory_id,\n            start: count,\n            end: count+1,\n            rowSpan: 1\n          }\n          count++\n          g.push(newT)\n        }\n      });\n      console.log(g)\n      this.rowSpans = g;\n    },\n    getInventoryOut() {\n      this.listLoading = true\n      fetchAllInventorys({inventory_type: 2, filter_data: this.listQuery })\n        .then(response => {\n          this.inventories = response.data\n          this.listLoading = false\n          this.calculateRowSpan()\n        })\n        .catch(err => {\n          this.$message({\n            message: '读取库存失败，请联系徐神检查',\n            type: 'error'\n          })\n          this.listLoading = false\n        })\n    },\n    getInventoryOutTypes() {\n      getAllInventoryTpes(2)\n        .then(response => {\n          this.inventoryTypes = response\n        })\n    },\n    getInventoryOutCount() {\n      getAllInventoryCount(2)\n        .then(response => {\n          this.total = response.total\n        })\n    },\n    getProductTypes() {\n      getAllProductType()\n        .then(response => {\n          this.productTypes = response\n        })\n    },\n    getSubType(productType, item) {\n      this.listQuery.product = undefined\n      this.listQuery.product_sub_type = undefined\n      this.productSubTypes = []\n      this.selectedProducts = []\n      if (productType) {\n        getProductSubType({product_type_id: productType})\n          .then(response => {\n            this.productSubTypes = response\n          })\n      }\n\n      if (item) {\n        item.product_sub_type = undefined\n        item.product_id = undefined\n        item.cost = undefined\n        item.size = undefined\n        item.quantity = undefined\n      }\n    },\n    getSelectedProducts(subType) {\n      this.listQuery.product = undefined\n      this.selectedProducts = []\n      if (subType) {\n        getProductBySubType({product_sub_type: subType})\n            .then(response => {\n              this.selectedProducts = response\n            })\n      }\n    },\n    getProductBySubType(subType, item) {\n      if (subType) {\n        getProductBySubType({product_sub_type: subType})\n          .then(response => {\n            this.products = response\n          })\n      }\n\n      if (item) {\n        item.product_id = undefined\n        item.cost = undefined\n        item.size = undefined\n        item.quantity = undefined\n      }\n    },\n    loadProductStorage() {\n      getStorage()\n        .then(response => {\n          this.productsStorage = response\n        })\n    },\n    readProductInfo(item) {\n      this.products.forEach(p => {\n        if (p.id === item.product_id) {\n          item.size = p.size;\n          item.cost = p.cost;\n        }\n      })\n\n      this.productsStorage.forEach(p => {\n        if (p.product_id === item.product_id) {\n          item.storage = p.quantity\n        }\n      })\n    },\n    objectSpanMethod({ row, column, rowIndex, columnIndex }) {\n      if (columnIndex === 0 || columnIndex === 1 || columnIndex === 2 || columnIndex === 9) {\n        let data = {\n          rowspan: 0,\n          colspan: 0\n        };\n        this.rowSpans.forEach(i => {\n          if (rowIndex >= i.start && rowIndex < i.end && (rowIndex - i.start) % i.rowSpan === 0) {\n            data = {\n              rowspan: i.rowSpan,\n              colspan: 1\n            };\n            return;\n          }\n        })\n\n        return data;\n      }\n        \n    },\n    handleFilter() {\n      this.listQuery.page = 1\n      this.getInventoryOut()\n    },\n    addMoreProduct() {\n      this.temp.products.push({\n        product_type: '',\n        product_sub_type: '',\n        product_id: '',\n        quantity: undefined,\n        cost: undefined,\n        key: this.temp.products.length + 1\n      });\n    },\n    removeProduct(itemIndex) {\n      this.$delete(this.temp.products, itemIndex)\n    },\n    handleCreate() {\n      this.dialogFormVisible = true\n    },\n    addNewInventory() {\n      this.$confirm('确定添加?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        this.sendAddInventoryRequest()\n      }).catch((err) => {   \n        console.log(err)     \n      });\n  },\n  sendAddInventoryRequest() {\n    if (!this.temp.inventory_type) {\n        this.$message({\n          message: '出库类型必须填写',\n          type: 'error'\n        })\n      } else if (this.temp.products.length === 0) {\n        this.$message({\n          message: '至少要有一个或以上的产品入库',\n          type: 'error'\n        })\n      } else {\n        let data = {\n          inventory_type: this.temp.inventory_type,\n          account_id: this.id,\n          product_data: [],\n          note: this.temp.note\n        }\n\n        this.temp.products.forEach(p => {\n          let d = {\n            id: p.product_id,\n            quantity: p.quantity,\n            cost: p.cost\n          }\n          data.product_data.push(d)\n        })\n\n        console.log(data)\n        this.listLoading = true\n        addNewInventoryRequest(data)\n          .then(response => {\n            this.listLoading = false\n            this.$alert('库存添加成功', '成功', {\n              confirmButtonText: '确定',\n              callback: action => {\n                this.page = 1\n                this.getInventoryOut()\n                this.loadProductStorage()\n                this.dialogFormVisible = false;\n                this.temp = {\n                  inventory_type: undefined,\n                  products: [{\n                      product_type: '',\n                      product_sub_type: '',\n                      product_id: '',\n                      quantity: undefined,\n                      cost: undefined,\n                      size: '',\n                      key: 1\n                    }\n                  ],\n                  note: undefined\n                }\n              }\n            });\n          })\n          .catch(err => {\n            console.log(err)     \n            this.$message({\n              message: '添加库存失败，请联系徐神检查',\n              type: 'error'\n            })\n            this.listLoading = false\n          })\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n  .tag {\n    color: white;\n    font-size: 14px;\n    width: 100px;\n  }\n\n  .sub_type_tag {\n    color: white;\n    font-size: 14px;\n    width: 120px;\n  }\n  .input-title {\n    display: inline-block;\n    width: 150px;\n    line-height: 25px;\n    font-size: 14px;\n    margin-left: 10px;\n  }\n</style>\n"],"sourceRoot":"src/views/inventory"}]}