{"remainingRequest":"/Users/yinxu/Desktop/Dev/Fur-Admin/fur-admin-site/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yinxu/Desktop/Dev/Fur-Admin/fur-admin-site/src/views/data/product.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/fur-admin-site/src/views/data/product.vue","mtime":1585041981638},{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/fur-admin-site/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/fur-admin-site/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/fur-admin-site/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/fur-admin-site/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport ProductAPI from '@/api/product'\n\nimport { parseTime } from '@/utils'\nimport Pagination from '@/components/Pagination' // secondary package based on el-pagination\nimport { mapGetters } from 'vuex'\n\nexport default {\n  name: 'ComplexTable',\n  components: { Pagination },\n  filters: {},\n  data() {\n    return {\n      tableKey: 0,\n      products: null,\n      productTypes: null,\n      selectedProductSubTypes: null,\n      total: 0,\n      listLoading: true,\n      dialogFormVisible: false,\n      typeRowSpans: null,\n      subTypeRowSpans: null,\n      listQuery: {\n        page: 1,\n        limit: 10\n      },\n      temp: {\n        title: null,\n        type: null,\n        sub_type: null,\n        size: null,\n        cost: null,\n        price: null,\n        note: null\n      }\n    }\n  },\n  created() {\n  },\n  computed: {\n    ...mapGetters([\n      'id'\n    ])\n  },\n  beforeRouteEnter (to, from, next) {\n    next(vm => { \n      vm.getProducts()\n      vm.getCount()\n      vm.getProductTypes()\n      next();\n    }) \n  },\n  methods: {\n    calculateRowSpan() {\n      let g = []\n      let sg = []\n      let count = 0\n      let scount = 0\n      this.products.forEach(i => {\n        let found = false\n        g.forEach(t => {\n          if (t.product_type_id === i.product_type_id) {\n            found = true\n            t.end++\n            t.rowSpan++\n            count = t.start + t.rowSpan\n          }\n        })\n\n        if (!found) {\n          let newT = {\n            product_type_id: i.product_type_id,\n            start: count,\n            end: count+1,\n            rowSpan: 1\n          }\n          count++\n          g.push(newT)\n        }\n\n        let sfound = false\n        sg.forEach(t => {\n          if (t.product_sub_type_id === i.product_sub_type_id) {\n            sfound = true\n            t.end++\n            t.rowSpan++\n            scount = t.start + t.rowSpan\n          }\n        })\n\n        if (!sfound) {\n          let newT = {\n            product_sub_type_id: i.product_sub_type_id,\n            start: scount,\n            end: scount+1,\n            rowSpan: 1\n          }\n          scount++\n          sg.push(newT)\n        }\n      });\n      this.typeRowSpans = g;\n      this.subTypeRowSpans = sg;\n    },\n    objectSpanMethod({ row, column, rowIndex, columnIndex }) {\n      if (columnIndex === 1) {\n        let data = {\n          rowspan: 0,\n          colspan: 0\n        };\n        this.typeRowSpans.forEach(i => {\n          if (rowIndex >= i.start && rowIndex < i.end && (rowIndex - i.start) % i.rowSpan === 0) {\n            data = {\n              rowspan: i.rowSpan,\n              colspan: 1\n            };\n            return;\n          }\n        })\n\n        return data;\n      } else if (columnIndex === 2) {\n        let data = {\n          rowspan: 0,\n          colspan: 0\n        };\n        this.subTypeRowSpans.forEach(i => {\n          if (rowIndex >= i.start && rowIndex < i.end && (rowIndex - i.start) % i.rowSpan === 0) {\n            data = {\n              rowspan: i.rowSpan,\n              colspan: 1\n            };\n            return;\n          }\n        })\n\n        return data;\n      }\n    },\n    getProducts() {\n      this.listLoading = true\n      ProductAPI.getAllProducts(this.listQuery)\n        .then(response => {\n          this.products = response\n          this.listLoading = false\n          this.calculateRowSpan()\n        })\n        .catch(err => {\n          this.$message({\n            message: '读取库存失败，请联系徐神检查',\n            type: 'error'\n          })\n          this.listLoading = false\n        })\n    },\n    getCount() {\n      ProductAPI.getAllProductCount()\n        .then(response => {\n          this.total = response.total\n        })\n    },\n    getProductTypes() {\n      ProductAPI.getAllProductType()\n        .then(response => {\n          this.productTypes = response\n        })\n    },\n    getSubType(productType) {\n      if (productType) {\n        ProductAPI.getProductSubType({product_type_id: productType})\n          .then(response => {\n            this.selectedProductSubTypes = response\n          })\n      }\n    },\n    handleCreate() {\n      this.dialogFormVisible = true\n    },\n    addNewProduct() {\n      this.$confirm('确定添加?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        this.sendNewProductRequest()\n      }).catch((err) => {   \n        console.log(err)     \n      });\n    },\n    sendNewProductRequest() {\n      if (!this.temp.title) {\n        this.$message({\n          message: '必须填写产品名称',\n          type: 'error'\n        })\n    } else {\n      this.listLoading = true\n      ProductAPI.addProduct(this.temp)\n        .then(response => {\n          this.listLoading = false\n            this.$alert('添加成功', '成功', {\n              confirmButtonText: '确定',\n              callback: action => {\n                this.page = 1\n                this.getProducts()\n                this.getCount()\n                this.selectedProductSubTypes = null\n                this.dialogFormVisible = false;\n                this.temp = {\n                  title: null,\n                  type: null,\n                  sub_type: null,\n                  size: null,\n                  cost: null,\n                  price: null,\n                  note: null\n                }\n              }\n            });\n        })\n        .catch(err => {\n          console.log(err)     \n          this.$message({\n            message: '添加失败，请联系徐神检查',\n            type: 'error'\n          })\n          this.listLoading = false\n        })\n      }\n    },\n    editEvent() {\n      \n    },\n    deleteEvent(item) {\n      this.$confirm('确定删除>>' + item.title + '<<吗？', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        this.sendDeleteEventRequest(item.id)\n      }).catch((err) => {   \n        console.log(err)     \n      });\n    },\n    sendDeleteEventRequest(id) {\n      this.listLoading = true\n      EventAPI.deleteEvent(id)\n        .then(response => {\n          this.listLoading = false\n            this.$alert('删除成功', '成功', {\n              confirmButtonText: '确定',\n              callback: action => {\n                this.page = 1\n                this.getEvents()\n                this.getCount()\n              }\n            });\n        })\n        .catch(err => {\n          console.log(err)     \n          this.$message({\n            message: '删除失败，请联系徐神检查',\n            type: 'error'\n          })\n          this.listLoading = false\n        })\n    }\n  }\n}\n",{"version":3,"sources":["product.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"product.vue","sourceRoot":"src/views/data","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <div>\n    <h2 class=\"title\">产品列表</h2>\n    <el-button class=\"create-button\" style=\"width: 200px; margin-left: 10px;\" type=\"success\" icon=\"el-icon-edit\" @click=\"handleCreate\">\n        添加新产品\n      </el-button>\n    </div>\n    <el-table\n      :key=\"tableKey\"\n      v-loading=\"listLoading\"\n      :data=\"products\"\n      :span-method=\"objectSpanMethod\"\n      border\n      fit\n      highlight-current-row\n      style=\"width: 100%;\"\n    >\n      <el-table-column label=\"产品ID\" prop=\"id\" width=\"100px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.id }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"产品类型\" width=\"150px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <el-tag class=\"tag\" :color=\"row.tag_color\">{{ row.product_type }}</el-tag>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"产品细类\" width=\"150px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <el-tag class=\"sub_type_tag\" :color=\"row.sub_type_tag_color\">{{ row.product_sub_type }}</el-tag>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"名称\" min-width=\"200px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <span class=\"link-type\" @click=\"handleUpdate(row)\">{{ row.title }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"型号\" width=\"100px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.size }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"成本\" width=\"100px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.cost }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"零售价\" width=\"100px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.price }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"操作\" width=\"300px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <el-button type=\"primary\" plain @click=\"editEvent(row)\">编辑</el-button>\n          <el-button type=\"danger\" plain @click=\"deleteEvent(row)\">删除</el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <pagination v-show=\"total>0\" :total=\"total\" :page.sync=\"listQuery.page\" :limit.sync=\"listQuery.limit\" @pagination=\"getProducts\" />\n\n    <el-dialog title=\"添加新产品\" :visible.sync=\"dialogFormVisible\" width=\"80%\">\n      <el-form ref=\"dataForm\"\n        :model=\"temp\" \n        label-position=\"left\" \n        label-width=\"10px\" \n        style=\"margin-left:20px;\">\n        <div>\n          <h3 style=\"display: inline-block; width: 100px; vertical-align: top; margin-top: 0;\"> 产品信息 </h3>\n          <div style=\"display: inline-block;\">\n            <div style=\" margin-bottom: 5px;\">\n              <div class=\"input-title\">产品名称</div>\n              <div class=\"input-title\">产品类型</div>\n              <div class=\"input-title\">产品细类</div>\n              <div class=\"input-title\">规格</div>\n              <div class=\"input-title\">成本</div>\n              <div class=\"input-title\">零售价</div>\n            </div>\n            <el-form-item label=\"\" prop=\"event\" style=\"margin-bottom: 10px;\">\n              <el-input placeholder=\"产品名称\" v-model=\"temp.title\" style=\"width: 150px;\" class=\"filter-item\" />\n              <el-select v-model=\"temp.type\" class=\"filter-item\" style=\"width: 150px;\" placeholder=\"产品类型\" clearable \n                @change=\"getSubType(temp.type, temp)\"\n                @clear=\"getSubType(temp.type, temp)\">\n                <el-option v-for=\"item in productTypes\" :key=\"item.id\" :label=\"item.title\" :value=\"item.id\" />\n              </el-select>\n              <el-select v-model=\"temp.sub_type\" class=\"filter-item\" style=\"width: 150px;\" placeholder=\"产品细类\" clearable >\n                <el-option v-for=\"item in selectedProductSubTypes\" :key=\"item.id\" :label=\"item.title\" :value=\"item.id\" />\n              </el-select>\n              <el-input placeholder=\"规格\" v-model=\"temp.size\" style=\"width: 150px;\" class=\"filter-item\" />\n              <el-input placeholder=\"成本\" v-model=\"temp.cost\" style=\"width: 150px;\" class=\"filter-item\" />\n              <el-input placeholder=\"零售价\" v-model=\"temp.price\" style=\"width: 150px;\" class=\"filter-item\" />\n            </el-form-item>\n          </div>\n          <div>\n          <h3 style=\"display: inline-block; width: 100px; vertical-align: top; margin-top: 0;\"> 产品备注 </h3>\n          <el-input\n            type=\"textarea\"\n            :autosize=\"{ minRows: 2, maxRows: 4}\"\n            placeholder=\"备注\"\n            v-model=\"temp.note\"\n            style=\"width: 70%\" />\n            </div>\n        </div>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"dialogFormVisible = false\">\n          取消\n        </el-button>\n        <el-button type=\"primary\" @click=\"addNewProduct()\">\n          提交\n        </el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport ProductAPI from '@/api/product'\n\nimport { parseTime } from '@/utils'\nimport Pagination from '@/components/Pagination' // secondary package based on el-pagination\nimport { mapGetters } from 'vuex'\n\nexport default {\n  name: 'ComplexTable',\n  components: { Pagination },\n  filters: {},\n  data() {\n    return {\n      tableKey: 0,\n      products: null,\n      productTypes: null,\n      selectedProductSubTypes: null,\n      total: 0,\n      listLoading: true,\n      dialogFormVisible: false,\n      typeRowSpans: null,\n      subTypeRowSpans: null,\n      listQuery: {\n        page: 1,\n        limit: 10\n      },\n      temp: {\n        title: null,\n        type: null,\n        sub_type: null,\n        size: null,\n        cost: null,\n        price: null,\n        note: null\n      }\n    }\n  },\n  created() {\n  },\n  computed: {\n    ...mapGetters([\n      'id'\n    ])\n  },\n  beforeRouteEnter (to, from, next) {\n    next(vm => { \n      vm.getProducts()\n      vm.getCount()\n      vm.getProductTypes()\n      next();\n    }) \n  },\n  methods: {\n    calculateRowSpan() {\n      let g = []\n      let sg = []\n      let count = 0\n      let scount = 0\n      this.products.forEach(i => {\n        let found = false\n        g.forEach(t => {\n          if (t.product_type_id === i.product_type_id) {\n            found = true\n            t.end++\n            t.rowSpan++\n            count = t.start + t.rowSpan\n          }\n        })\n\n        if (!found) {\n          let newT = {\n            product_type_id: i.product_type_id,\n            start: count,\n            end: count+1,\n            rowSpan: 1\n          }\n          count++\n          g.push(newT)\n        }\n\n        let sfound = false\n        sg.forEach(t => {\n          if (t.product_sub_type_id === i.product_sub_type_id) {\n            sfound = true\n            t.end++\n            t.rowSpan++\n            scount = t.start + t.rowSpan\n          }\n        })\n\n        if (!sfound) {\n          let newT = {\n            product_sub_type_id: i.product_sub_type_id,\n            start: scount,\n            end: scount+1,\n            rowSpan: 1\n          }\n          scount++\n          sg.push(newT)\n        }\n      });\n      this.typeRowSpans = g;\n      this.subTypeRowSpans = sg;\n    },\n    objectSpanMethod({ row, column, rowIndex, columnIndex }) {\n      if (columnIndex === 1) {\n        let data = {\n          rowspan: 0,\n          colspan: 0\n        };\n        this.typeRowSpans.forEach(i => {\n          if (rowIndex >= i.start && rowIndex < i.end && (rowIndex - i.start) % i.rowSpan === 0) {\n            data = {\n              rowspan: i.rowSpan,\n              colspan: 1\n            };\n            return;\n          }\n        })\n\n        return data;\n      } else if (columnIndex === 2) {\n        let data = {\n          rowspan: 0,\n          colspan: 0\n        };\n        this.subTypeRowSpans.forEach(i => {\n          if (rowIndex >= i.start && rowIndex < i.end && (rowIndex - i.start) % i.rowSpan === 0) {\n            data = {\n              rowspan: i.rowSpan,\n              colspan: 1\n            };\n            return;\n          }\n        })\n\n        return data;\n      }\n    },\n    getProducts() {\n      this.listLoading = true\n      ProductAPI.getAllProducts(this.listQuery)\n        .then(response => {\n          this.products = response\n          this.listLoading = false\n          this.calculateRowSpan()\n        })\n        .catch(err => {\n          this.$message({\n            message: '读取库存失败，请联系徐神检查',\n            type: 'error'\n          })\n          this.listLoading = false\n        })\n    },\n    getCount() {\n      ProductAPI.getAllProductCount()\n        .then(response => {\n          this.total = response.total\n        })\n    },\n    getProductTypes() {\n      ProductAPI.getAllProductType()\n        .then(response => {\n          this.productTypes = response\n        })\n    },\n    getSubType(productType) {\n      if (productType) {\n        ProductAPI.getProductSubType({product_type_id: productType})\n          .then(response => {\n            this.selectedProductSubTypes = response\n          })\n      }\n    },\n    handleCreate() {\n      this.dialogFormVisible = true\n    },\n    addNewProduct() {\n      this.$confirm('确定添加?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        this.sendNewProductRequest()\n      }).catch((err) => {   \n        console.log(err)     \n      });\n    },\n    sendNewProductRequest() {\n      if (!this.temp.title) {\n        this.$message({\n          message: '必须填写产品名称',\n          type: 'error'\n        })\n    } else {\n      this.listLoading = true\n      ProductAPI.addProduct(this.temp)\n        .then(response => {\n          this.listLoading = false\n            this.$alert('添加成功', '成功', {\n              confirmButtonText: '确定',\n              callback: action => {\n                this.page = 1\n                this.getProducts()\n                this.getCount()\n                this.selectedProductSubTypes = null\n                this.dialogFormVisible = false;\n                this.temp = {\n                  title: null,\n                  type: null,\n                  sub_type: null,\n                  size: null,\n                  cost: null,\n                  price: null,\n                  note: null\n                }\n              }\n            });\n        })\n        .catch(err => {\n          console.log(err)     \n          this.$message({\n            message: '添加失败，请联系徐神检查',\n            type: 'error'\n          })\n          this.listLoading = false\n        })\n      }\n    },\n    editEvent() {\n      \n    },\n    deleteEvent(item) {\n      this.$confirm('确定删除>>' + item.title + '<<吗？', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        this.sendDeleteEventRequest(item.id)\n      }).catch((err) => {   \n        console.log(err)     \n      });\n    },\n    sendDeleteEventRequest(id) {\n      this.listLoading = true\n      EventAPI.deleteEvent(id)\n        .then(response => {\n          this.listLoading = false\n            this.$alert('删除成功', '成功', {\n              confirmButtonText: '确定',\n              callback: action => {\n                this.page = 1\n                this.getEvents()\n                this.getCount()\n              }\n            });\n        })\n        .catch(err => {\n          console.log(err)     \n          this.$message({\n            message: '删除失败，请联系徐神检查',\n            type: 'error'\n          })\n          this.listLoading = false\n        })\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n  .title {\n    display: inline-block;\n  }\n\n  .create-button {\n    margin-left: 50px !important;\n  }\n\n  .tag {\n    color: white;\n    font-size: 14px;\n    width: 100px;\n  }\n\n  .sub_type_tag {\n    color: white;\n    font-size: 14px;\n    width: 120px;\n  }\n  .input-title {\n    display: inline-block;\n    width: 150px;\n    line-height: 25px;\n    font-size: 14px;\n    margin-left: 10px;\n  }\n</style>\n"]}]}