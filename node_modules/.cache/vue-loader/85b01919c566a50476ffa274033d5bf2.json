{"remainingRequest":"/Users/yinxu/Desktop/Dev/Fur-Admin/fur-admin-site/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yinxu/Desktop/Dev/Fur-Admin/fur-admin-site/src/views/inventory/inventory-out.vue?vue&type=style&index=0&id=34fa29c0&lang=scss&scoped=true&","dependencies":[{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/fur-admin-site/src/views/inventory/inventory-out.vue","mtime":1595936499192},{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/fur-admin-site/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/fur-admin-site/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/fur-admin-site/node_modules/postcss-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/fur-admin-site/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/fur-admin-site/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/fur-admin-site/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.tag {\n  color: white;\n  font-size: 14px;\n  width: 100px;\n}\n\n.sub_type_tag {\n  color: white;\n  font-size: 14px;\n  width: 120px;\n}\n.input-title {\n  display: inline-block;\n  width: 150px;\n  line-height: 25px;\n  font-size: 14px;\n  margin-left: 10px;\n}\n",{"version":3,"sources":["inventory-out.vue"],"names":[],"mappingskjBA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"inventory-out.vue","sourceRoot":"src/views/inventory","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <div class=\"filter-container\">\n      <h2>筛选结果</h2>\n      <el-input v-model=\"listQuery.inventory_id\" placeholder=\"出库批次\" style=\"width: 150px;\" class=\"filter-item\"/>\n      <el-select v-model=\"listQuery.inventory_type\" placeholder=\"出库类型\" clearable style=\"width: 150px; margin-left: 15px;\" class=\"filter-item\">\n        <el-option v-for=\"item in inventoryTypes\" :key=\"item.id\" :label=\"item.title\" :value=\"item.id\" />\n      </el-select>\n      <el-select v-model=\"listQuery.product_type\" placeholder=\"产品类型\" clearable style=\"width: 150px; margin-left: 15px;\" class=\"filter-item\" @change=\"getSubType(listQuery.product_type)\">\n        <el-option v-for=\"item in productTypes\" :key=\"item.id\" :label=\"item.title\" :value=\"item.id\" />\n      </el-select>\n      <el-select v-model=\"listQuery.product_sub_type\" placeholder=\"产品分类\" clearable style=\"width: 150px; margin-left: 15px;\" class=\"filter-item\" @change=\"getSelectedProducts(listQuery.product_sub_type)\">\n        <el-option v-for=\"item in productSubTypes\" :key=\"item.id\" :label=\"item.title\" :value=\"item.id\" />\n      </el-select>\n      <el-select v-model=\"listQuery.product\" placeholder=\"产品\" clearable style=\"width: 150px; margin-left: 15px;\" class=\"filter-item\">\n        <el-option v-for=\"item in selectedProducts\" :key=\"item.id\" :label=\"item.title\" :value=\"item.id\" />\n      </el-select>\n      <el-button v-waves class=\"filter-item\" type=\"primary\" icon=\"el-icon-search\" @click=\"handleFilter\" style=\"width: 100px; margin-left: 15px;\">\n        搜索\n      </el-button>\n      <el-button class=\"filter-item\" style=\"width: 200px; margin-left: 10px;\" type=\"success\" icon=\"el-icon-edit\" @click=\"handleCreate\">\n        添加新出库\n      </el-button>\n    </div>\n\n    <h2>出库详情</h2>\n    <el-table\n      :key=\"tableKey\"\n      v-loading=\"listLoading\"\n      :data=\"inventories\"\n      :span-method=\"objectSpanMethod\"\n      border\n      fit\n      highlight-current-row\n      style=\"width: 100%;\"\n    >\n      <el-table-column label=\"出库批次ID\" prop=\"id\" width=\"100px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.inventory_id }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"出库类型\" prop=\"inventory_type\" width=\"100px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.inventory_type }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"出库时间\" prop=\"inventory_type\" width=\"150px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <span>{{moment(row.date).format('YYYY-MM-DD')}}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"产品类型\" width=\"150px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <el-tag class=\"tag\" :color=\"row.tag_color\">{{ row.product_type }}</el-tag>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"产品细类\" width=\"150px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <el-tag class=\"sub_type_tag\" :color=\"row.sub_type_tag_color\">{{ row.product_sub_type }}</el-tag>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"产品名称\" min-width=\"200px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <span class=\"link-type\" @click=\"handleUpdate(row)\">{{ row.title }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"产品型号\" width=\"100px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.size }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"出库数量\" width=\"100px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.quantity }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"产品成本\" width=\"150px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <span>￥{{ row.per_item_cost_atm }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"申请人\" width=\"150px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.ordered_by }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"备注\" width=\"150px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.note }}</span>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <pagination v-show=\"total>0\" :total=\"total\" :page.sync=\"listQuery.page\" :limit.sync=\"listQuery.limit\" @pagination=\"getInventoryOut\" />\n\n    <el-dialog title=\"添加新出库\" :visible.sync=\"dialogFormVisible\" width=\"80%\">\n      <el-form ref=\"dataForm\"\n        :model=\"temp\" \n        label-position=\"left\" \n        label-width=\"10px\" \n        style=\"margin-left:20px;\">\n        <div>\n          <h3 style=\"display: inline-block; width: 100px;\"> 出库类型 </h3>\n          <el-form-item prop=\"type\" style=\"display: inline-block;\">\n            <el-select v-model=\"temp.inventory_type\" placeholder=\"选择出库类型\">\n              <el-option v-for=\"item in inventoryTypes\" :key=\"item.id\" :label=\"item.title\" :value=\"item.id\" />\n            </el-select>\n          </el-form-item>\n        </div>\n        <div>\n          <h3 style=\"width: 100px; vertical-align: top; margin-top: 0;\"> 出库产品 </h3>\n          <div style=\"margin-bottom: 20px\"> \n            作弊工具：\n            <el-button type=\"info\" @click=\"addAllProductBySubType(1)\">\n              添加小冻干套装\n            </el-button>\n            <el-button type=\"info\" @click=\"addAllProductBySubType(2)\">\n              添加大冻干套装\n            </el-button>\n            <el-button type=\"info\" @click=\"addAllProductBySubType(3)\">\n              添加肉干套装\n            </el-button>\n            <el-button type=\"info\" @click=\"addAllProductBySubType(4)\">\n              添加狗鲜粮套装\n            </el-button>\n            <el-button type=\"info\" @click=\"addAllProductBySubType(5)\">\n              添加猫鲜粮套装\n            </el-button>\n          </div>\n          <div style=\"display: inline-block;\">\n            <div style=\" margin-bottom: 5px;\">\n              <div class=\"input-title\">产品类型</div>\n              <div class=\"input-title\">产品分类</div>\n              <div class=\"input-title\">产品名称</div>\n              <div class=\"input-title\">产品规格</div>\n              <div class=\"input-title\">出库数量</div>\n              <div class=\"input-title\">产品成本</div>\n              <div class=\"input-title\">当前库存</div>\n            </div>\n            <el-form-item v-for=\"(p, index) in temp.products\" \n              label=\"\" :key=\"p.id\" prop=\"product\" style=\"margin-bottom: 10px;\">\n              <el-select v-model=\"p.product_type\" value-key=\"id\" placeholder=\"产品类型\" \n                clearable style=\"width: 150px;\" class=\"filter-item\">\n                <el-option v-for=\"item in productTypes\" :key=\"item.id\" :label=\"item.title\" :value=\"item\" />\n              </el-select>\n              <el-select v-if=\"temp.products[index].product_type\" v-model=\"p.product_sub_type\" value-key=\"id\" style=\"width: 150px; margin-left: 10px;\" class=\"filter-item\" \n                placeholder=\"产品分类\" clearable \n                @change=\"getProductBySubType(p.product_sub_type, p)\" \n                @clear=\"getProductBySubType(p.product_sub_type, p)\">\n                <el-option  v-for=\"item in temp.products[index].product_type.sub_type\" :key=\"item.id\" :label=\"item.title\" :value=\"item\" />\n              </el-select>\n              <el-select v-if=\"temp.products[index].product_sub_type\" v-model=\"p.product\" value-key=\"id\" style=\"width: 150px; margin-left: 10px;\" class=\"filter-item\" \n                placeholder=\"产品名称\" clearable \n                @change=\"readProductInfo(p)\"\n                @clear=\"readProductInfo(p)\">\n                <el-option v-for=\"item in temp.products[index].product_sub_type.products\" :key=\"item.id\" :label=\"item.title\" :value=\"item\" />\n              </el-select>\n              <el-input placeholder=\"产品型号\" v-model=\"p.size\" :disabled=\"true\" style=\"width: 150px; margin-left: 10px;\" class=\"filter-item\" />\n              <el-input v-model=\"p.quantity\" placeholder=\"填出库数量\" class=\"filter-item\" clearable style=\"width: 150px; margin-left: 10px;\" />\n              <el-input v-model=\"p.cost\" placeholder=\"填写产品成本\" class=\"filter-item\" clearable style=\"width: 150px; margin-left: 10px;\" />\n              <el-input v-model=\"p.storage\" class=\"filter-item\" :disabled=\"true\" style=\"width: 150px; margin-left: 10px;\" />\n              <el-button style=\"margin-left: 40px;\" type=\"danger\" icon=\"el-icon-delete\" @click=\"removeProduct(index)\" />\n            </el-form-item>\n\n            <el-form-item>\n              <el-button style=\"width: 150px;\" type=\"primary\" plain @click=\"addMoreProduct\">添加产品</el-button>\n            </el-form-item>\n          </div>\n          <div style=\"margin-bottom: 10px;\">\n            <h3 style=\"display: inline-block; width: 100px; vertical-align: top; margin-top: 0;\"> 申请人 </h3>\n            <el-input v-model=\"temp.ordered_by\" placeholder=\"填写申请人姓名\" class=\"filter-item\" clearable style=\"width: 200px;\" />\n          </div>\n          <div style=\" margin-bottom: 20px; \">\n            <h3 style=\"display: inline-block; width: 100px; vertical-align: top; margin-top: 0;\" class=\"section-title\"> 出库日期 </h3>\n            <el-date-picker\n              v-model=\"temp.date\"\n              align=\"right\"\n              type=\"date\"\n              placeholder=\"选择日期\"\n              :picker-options=\"pickerOptions\">\n            </el-date-picker>\n          </div>\n          <div>\n            <h3 style=\"display: inline-block; width: 100px; vertical-align: top; margin-top: 0;\"> 出库备注 </h3>\n            <el-input\n              type=\"textarea\"\n              :autosize=\"{ minRows: 2, maxRows: 4}\"\n              placeholder=\"备注\"\n              v-model=\"temp.note\"\n              style=\"width: 70%\" />\n          </div>\n        </div>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"dialogFormVisible = false\">\n          取消\n        </el-button>\n        <el-button type=\"primary\" @click=\"addNewInventory()\">\n          提交\n        </el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\n\nimport InventoryAPI from '@/api/inventory.js'\nimport ProductAPI from '@/api/product'\n\nimport waves from '@/directive/waves' // waves directive\nimport { parseTime } from '@/utils'\nimport Pagination from '@/components/Pagination' // secondary package based on el-pagination\nimport { mapGetters } from 'vuex'\nimport moment from 'moment'\n\nexport default {\n  name: 'ComplexTable',\n  components: { Pagination },\n  directives: { waves },\n  filters: {},\n  data() {\n    return {\n      tableKey: 0,\n      inventories: null,\n      total: 0,\n      listLoading: true,\n      inventoryTypes:[],\n      productTypes: [],\n      productSubTypes: [],\n      selectedProducts: [],\n      products: [],\n      productsStorage: [],\n      listQuery: {\n        inventory_id: undefined,\n        inventory_type: undefined,\n        page: 1,\n        limit: 10,\n        product_type: undefined,\n        product_sub_type: undefined,\n        product: undefined,\n      },\n      temp: {\n        inventory_type: undefined,\n        products: [{\n            product_type: '',\n            product_sub_type: '',\n            product_id: '',\n            quantity: undefined,\n            cost: undefined,\n            size: '',\n            key: 1\n          }\n        ],\n        note: undefined,\n        ordered_by: undefined,\n        date: undefined\n      },\n      dialogFormVisible: false,\n      rowSpans: null,\n      pickerOptions: {\n        disabledDate(time) {\n          return time.getTime() > Date.now();\n        },\n        shortcuts: [{\n          text: '今天',\n          onClick(picker) {\n            picker.$emit('pick', new Date());\n          }\n        }, {\n          text: '昨天',\n          onClick(picker) {\n            const date = new Date();\n            date.setTime(date.getTime() - 3600 * 1000 * 24);\n            picker.$emit('pick', date);\n          }\n        }, {\n          text: '一周前',\n          onClick(picker) {\n            const date = new Date();\n            date.setTime(date.getTime() - 3600 * 1000 * 24 * 7);\n            picker.$emit('pick', date);\n          }\n        }]\n      }\n    }\n  },\n  created() {\n  },\n  computed: {\n    ...mapGetters([\n      'id'\n    ])\n  },\n  beforeRouteEnter (to, from, next) {\n    next(vm => { \n      vm.getInventoryOut()\n      vm.getInventoryOutCount()\n      vm.getProductTypes()\n      vm.getInventoryOutTypes()\n      vm.loadProductStorage()\n      next();\n    }) \n  },\n  methods: {\n    calculateRowSpan() {\n      let g = []\n      let count = 0\n      this.inventories.forEach(i => {\n        let found = false\n        g.forEach(t => {\n          if (t.id === i.inventory_id) {\n            found = true\n            t.end++\n            t.rowSpan++\n            count = t.start + t.rowSpan\n          }\n        })\n\n        if (!found) {\n          let newT = {\n            id: i.inventory_id,\n            start: count,\n            end: count+1,\n            rowSpan: 1\n          }\n          count++\n          g.push(newT)\n        }\n      });\n      console.log(g)\n      this.rowSpans = g;\n    },\n    getInventoryOut() {\n      this.listLoading = true\n      this.listQuery.type_id = 2\n      InventoryAPI.fetchAllInventorys(this.listQuery)\n        .then(response => {\n          this.inventories = response.data\n          this.listLoading = false\n          this.calculateRowSpan()\n        })\n        .catch(err => {\n          this.$message({\n            message: '读取库存失败，请联系徐神检查',\n            type: 'error'\n          })\n          this.listLoading = false\n        })\n    },\n    getInventoryOutTypes() {\n      InventoryAPI.getAllInventoryTpes(2)\n        .then(response => {\n          this.inventoryTypes = response\n        })\n    },\n    getInventoryOutCount() {\n      this.listQuery.type_id = 2\n      InventoryAPI.getAllInventoryCount(this.listQuery)\n        .then(response => {\n          this.total = response.total\n        })\n    },\n    loadProductStorage() {\n      InventoryAPI.getStorage()\n        .then(response => {\n          this.productsStorage = response\n        })\n    },\n    getProductTypes() {\n      ProductAPI.getAllProductType()\n        .then(response => {\n          this.productTypes = response\n        })\n    },\n    getProductBySubType(subType, item) {\n      this.products = subType.products\n    },\n    readProductInfo(item) {\n      this.products.forEach(p => {\n        if (p.id === item.product.id) {\n          item.product_id = p.id\n          item.size = p.size\n          item.cost = p.cost\n        }\n      })\n\n      this.productsStorage.forEach(p => {\n        if (p.product_id === item.product.id) {\n          item.storage = p.quantity\n        }\n      })\n    },\n    objectSpanMethod({ row, column, rowIndex, columnIndex }) {\n      if (columnIndex === 0 || columnIndex === 1 || columnIndex === 2 || columnIndex === 9) {\n        let data = {\n          rowspan: 0,\n          colspan: 0\n        };\n        this.rowSpans.forEach(i => {\n          if (rowIndex >= i.start && rowIndex < i.end && (rowIndex - i.start) % i.rowSpan === 0) {\n            data = {\n              rowspan: i.rowSpan,\n              colspan: 1\n            };\n            return;\n          }\n        })\n\n        return data;\n      }\n        \n    },\n    handleFilter() {\n      this.listQuery.page = 1\n      this.getInventoryOut()\n      this.getInventoryOutCount()\n    },\n    addMoreProduct() {\n      this.temp.products.push({\n        product_type: '',\n        product_sub_type: '',\n        product_id: '',\n        quantity: undefined,\n        cost: undefined,\n        key: this.temp.products.length + 1\n      });\n    },\n    removeProduct(itemIndex) {\n      this.$delete(this.temp.products, itemIndex)\n    },\n    addAllProductBySubType(subType) {\n      let id = 0\n      if (subType === 1) { //小包冻干\n        id = process.env.PRODUCT_SUB_TYPE_ID.MINI_FD\n      } else if (subType === 2) { //大包冻干\n        id = process.env.PRODUCT_SUB_TYPE_ID.LARGE_FD\n      } else if (subType === 3) { //肉干\n        id = process.env.PRODUCT_SUB_TYPE_ID.TREAT\n      } else if (subType === 4) { //犬用鲜粮\n        id = process.env.PRODUCT_SUB_TYPE_ID.DOG_FF\n      } else if (subType === 5) { //猫用鲜粮\n        id = process.env.PRODUCT_SUB_TYPE_ID.CAT_FF\n      }\n      ProductAPI.getAllProductsBySubType(id)\n        .then(response => {\n            response.sub_type[0].products.forEach(p => {\n              let pd = {\n                product_type: response,\n                product_sub_type: response.sub_type[0],\n                product_id: p.id,\n                product: p,\n                size: p.size,\n                cost: p.cost,\n                quantity: 1,\n                note: undefined,\n                key: this.temp.products.length + 1\n              }\n              this.productsStorage.forEach(s => {\n                if (s.product_id === p.id) {\n                  pd.storage = s.quantity\n                }\n              })\n              this.temp.products.push(pd);\n            })\n          })\n          .catch(err => {\n            this.$message({\n              message: '作弊工具出问题了，请联系徐神检查',\n              type: 'error'\n            })\n          })\n    },\n    handleCreate() {\n      this.dialogFormVisible = true\n    },\n    addNewInventory() {\n      this.$confirm('确定添加?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        this.sendAddInventoryRequest()\n      }).catch((err) => {   \n        console.log(err)     \n      });\n  },\n  sendAddInventoryRequest() {\n    if (!this.temp.inventory_type) {\n        this.$message({\n          message: '出库类型必须填写',\n          type: 'error'\n        })\n    } else if (this.temp.products.length === 0) {\n      this.$message({\n        message: '至少要有一个或以上的产品出库',\n        type: 'error'\n      })\n    } else {\n      let data = {\n        inventory_type: this.temp.inventory_type,\n        account_id: this.id,\n        product_data: [],\n        note: this.temp.note,\n        ordered_by: this.temp.ordered_by,\n        date: moment(this.temp.date).format('YYYY-MM-DD')\n      }\n\n      this.temp.products.forEach(p => {\n        let d = {\n          id: p.product_id,\n          quantity: p.quantity,\n          cost: p.cost\n        }\n        data.product_data.push(d)\n      })\n\n      console.log(data)\n      this.listLoading = true\n      InventoryAPI.addNewInventoryRequest(data)\n        .then(response => {\n          this.listLoading = false\n          this.$alert('库存添加成功', '成功', {\n            confirmButtonText: '确定',\n            callback: action => {\n              this.page = 1\n              this.getInventoryOut()\n              this.loadProductStorage()\n              this.dialogFormVisible = false;\n              this.temp = {\n                inventory_type: undefined,\n                products: [{\n                    product_type: '',\n                    product_sub_type: '',\n                    product_id: '',\n                    quantity: undefined,\n                    cost: undefined,\n                    size: '',\n                    key: 1\n                  }\n                ],\n                note: undefined,\n                ordered_by: undefined\n              }\n            }\n          });\n        })\n        .catch(err => {\n          console.log(err)     \n          this.$message({\n            message: '添加库存失败，请联系徐神检查',\n            type: 'error'\n          })\n          this.listLoading = false\n        })\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n  .tag {\n    color: white;\n    font-size: 14px;\n    width: 100px;\n  }\n\n  .sub_type_tag {\n    color: white;\n    font-size: 14px;\n    width: 120px;\n  }\n  .input-title {\n    display: inline-block;\n    width: 150px;\n    line-height: 25px;\n    font-size: 14px;\n    margin-left: 10px;\n  }\n</style>\n"]}]}