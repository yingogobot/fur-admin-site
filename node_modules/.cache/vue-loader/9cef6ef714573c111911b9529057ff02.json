{"remainingRequest":"/Users/yinxu/Desktop/Dev/Fur-Admin/fur-admin-site/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yinxu/Desktop/Dev/Fur-Admin/fur-admin-site/src/views/inventory/inventory-in.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/fur-admin-site/src/views/inventory/inventory-in.vue","mtime":1576742913385},{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/fur-admin-site/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/fur-admin-site/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yinxu/Desktop/Dev/Fur-Admin/fur-admin-site/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport InventoryAPI from '@/api/inventory.js'\nimport ProductAPI from '@/api/product'\n\nimport waves from '@/directive/waves' // waves directive\nimport { parseTime } from '@/utils'\nimport Pagination from '@/components/Pagination' // secondary package based on el-pagination\nimport { mapGetters } from 'vuex'\n\nexport default {\n  name: 'ComplexTable',\n  components: { Pagination },\n  directives: { waves },\n  filters: {},\n  data() {\n    return {\n      tableKey: 0,\n      inventories: null,\n      total: 0,\n      listLoading: true,\n      inventoryTypes:[],\n      productTypes: [],\n      productSubTypes: [],\n      selectedProducts: [],\n      products: [],\n      listQuery: {\n        inventory_id: undefined,\n        inventory_type: undefined,\n        page: 1,\n        limit: 10,\n        product_type: undefined,\n        product_sub_type: undefined,\n        product: undefined,\n      },\n      temp: {\n        inventory_type: undefined,\n        products: [{\n            product_type: '',\n            product_sub_type: '',\n            product_id: '',\n            quantity: undefined,\n            cost: undefined,\n            size: '',\n            key: 1\n          }\n        ],\n        note: undefined\n      },\n      dialogFormVisible: false,\n      rowSpans: null\n    }\n  },\n  created() {\n    this.getInventoryIn()\n    this.getInventoryInCount()\n    this.getProductTypes()\n    this.getInventoryInTypes()\n  },\n  computed: {\n    ...mapGetters([\n      'id'\n    ])\n  },\n  methods: {\n    calculateRowSpan() {\n      let g = []\n      let count = 0\n      this.inventories.forEach(i => {\n        let found = false\n        g.forEach(t => {\n          if (t.id === i.inventory_id) {\n            found = true\n            t.end++\n            t.rowSpan++\n            count = t.start + t.rowSpan\n          }\n        })\n\n        if (!found) {\n          let newT = {\n            id: i.inventory_id,\n            start: count,\n            end: count+1,\n            rowSpan: 1\n          }\n          count++\n          g.push(newT)\n        }\n      });\n      console.log(g)\n      this.rowSpans = g;\n    },\n    getInventoryIn() {\n      this.listLoading = true\n      this.listQuery.type_id = 1\n      InventoryAPI.fetchAllInventorys(this.listQuery)\n        .then(response => {\n          this.inventories = response.data\n          this.listLoading = false\n          this.calculateRowSpan()\n        })\n        .catch(err => {\n          this.$message({\n            message: '读取库存失败，请联系徐神检查',\n            type: 'error'\n          })\n          this.listLoading = false\n        })\n    },\n    getInventoryInTypes() {\n      InventoryAPI.getAllInventoryTpes(1)\n        .then(response => {\n          this.inventoryTypes = response\n        })\n    },\n    getInventoryInCount() {\n      InventoryAPI.getAllInventoryCount(1)\n        .then(response => {\n          console.log(response)\n          this.total = response.total\n        })\n    },\n    getProductTypes() {\n      ProductAPI.getAllProductType()\n        .then(response => {\n          this.productTypes = response\n        })\n    },\n    getSubType(productType, item) {\n      this.listQuery.product = undefined\n      this.listQuery.product_sub_type = undefined\n      this.productSubTypes = []\n      this.selectedProducts = []\n      if (productType) {\n        ProductAPI.getProductSubType({product_type_id: productType})\n          .then(response => {\n            this.productSubTypes = response\n          })\n      }\n\n      if (item) {\n        item.product_sub_type = undefined\n        item.product_id = undefined\n        item.cost = undefined\n        item.size = undefined\n        item.quantity = undefined\n      }\n    },\n    getSelectedProducts(subType) {\n\n      this.listQuery.product = undefined\n      this.selectedProducts = []\n      if (subType) {\n        ProductAPI.getProductBySubType({product_sub_type: subType})\n            .then(response => {\n              this.selectedProducts = response\n            })\n      }\n    },\n    getProductBySubType(subType, item) {\n      if (subType) {\n        ProductAPI.getProductBySubType({product_sub_type: subType})\n          .then(response => {\n            this.products = response\n          })\n      }\n\n      if (item) {\n        item.product_id = undefined\n        item.cost = undefined\n        item.size = undefined\n        item.quantity = undefined\n      }\n    },\n    readProductInfo(item) {\n      this.products.forEach(p => {\n        if (p.id === item.product_id) {\n          item.size = p.size;\n          item.cost = p.cost;\n        }\n      })\n    },\n    objectSpanMethod({ row, column, rowIndex, columnIndex }) {\n      if (columnIndex === 0 || columnIndex === 1 || columnIndex === 2 || columnIndex === 9) {\n        let data = {\n          rowspan: 0,\n          colspan: 0\n        };\n        this.rowSpans.forEach(i => {\n          if (rowIndex >= i.start && rowIndex < i.end && (rowIndex - i.start) % i.rowSpan === 0) {\n            data = {\n              rowspan: i.rowSpan,\n              colspan: 1\n            };\n            return;\n          }\n        })\n\n        return data;\n      }\n        \n    },\n    handleFilter() {\n      this.listQuery.page = 1\n      this.getInventoryIn()\n    },\n    addMoreProduct() {\n      this.temp.products.push({\n        product_type: '',\n        product_sub_type: '',\n        product_id: '',\n        quantity: undefined,\n        cost: undefined,\n        key: this.temp.products.length + 1\n      });\n    },\n    removeProduct(itemIndex) {\n      this.$delete(this.temp.products, itemIndex)\n    },\n    handleCreate() {\n      this.dialogFormVisible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    addNewInventory() {\n      this.$confirm('确定添加?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        this.sendAddInventoryRequest()\n      }).catch((err) => {   \n        console.log(err)     \n      });\n  },\n  sendAddInventoryRequest() {\n    if (!this.temp.inventory_type) {\n        this.$message({\n          message: '入库类型必须填写',\n          type: 'error'\n        })\n      } else if (this.temp.products.length === 0) {\n        this.$message({\n          message: '至少要有一个或以上的产品入库',\n          type: 'error'\n        })\n      } else {\n        let data = {\n          inventory_type: this.temp.inventory_type,\n          account_id: this.id,\n          product_data: [],\n          note: this.temp.note\n        }\n\n        this.temp.products.forEach(p => {\n          let d = {\n            id: p.product_id,\n            quantity: p.quantity,\n            cost: p.cost\n          }\n          data.product_data.push(d)\n        })\n\n        console.log(data)\n        this.listLoading = true\n        addNewInventoryRequest(data)\n          .then(response => {\n            this.listLoading = false\n            this.$alert('库存添加成功', '成功', {\n              confirmButtonText: '确定',\n              callback: action => {\n                this.page = 1\n                this.getInventoryIn()\n                this.dialogFormVisible = false;\n                this.temp = {\n                  inventory_type: undefined,\n                  products: [{\n                      product_type: '',\n                      product_sub_type: '',\n                      product_id: '',\n                      quantity: undefined,\n                      cost: undefined,\n                      size: '',\n                      key: 1\n                    }\n                  ],\n                  note: undefined\n                }\n              }\n            });\n          })\n          .catch(err => {\n            console.log(err)     \n            this.$message({\n              message: '添加库存失败，请联系徐神检查',\n              type: 'error'\n            })\n            this.listLoading = false\n          })\n      }\n    }\n  }\n}\n",null]}